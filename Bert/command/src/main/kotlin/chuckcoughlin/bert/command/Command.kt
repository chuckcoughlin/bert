/**
 * Copyright 2022-2024 Charles Coughlin. All Rights Reserved.
 * MIT License.
 */
package chuckcoughlin.bert.command

import chuckcoughlin.bert.common.controller.Controller
import chuckcoughlin.bert.common.controller.ControllerType
import chuckcoughlin.bert.common.message.CommandType
import chuckcoughlin.bert.common.message.MessageBottle
import chuckcoughlin.bert.common.message.RequestType
import chuckcoughlin.bert.common.model.ConfigurationConstants
import chuckcoughlin.bert.common.model.RobotModel
import chuckcoughlin.bert.speech.process.MessageTranslator
import kotlinx.coroutines.CompletableDeferred
import kotlinx.coroutines.Deferred
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.async
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.selects.select
import java.net.ServerSocket
import java.util.logging.Logger

/**
 * This is the class that handles spoken commands and forwards
 * them on to the central dispatcher. It also handles database actions
 * involving playback and record.
 *
 * This class routes requests/responses between the Dispatcher and a TCP network (wifi).
 * Communication with the Dispatcher is via Kotlin channels and communication with
 * the network is via a TCP socket.
 *
 * If there is no network connection configured, this class is not called
 * by the dispatcher.
 *
 * @param req - channel for dispatcher requests as generated by the user
 * @param rsp - channel for responses from the parent (Dispatcher)
 */
class Command(req : Channel<MessageBottle>,rsp: Channel<MessageBottle>) :Controller {
    private val host:String
    private val port:Int
    private val messageTranslator: MessageTranslator
    private var requestChannel=req    // Dispatcher->Command  (results of user requests)
    private var responseChannel=rsp    // Command->Dispatcher  (requests initiated by user)

    @DelicateCoroutinesApi
    private val scope=GlobalScope // For long-running coroutines
    private var connected: CompletableDeferred<Boolean>
    private var ignoring: Boolean
    private var running: Boolean
    private var job: Job

    /**
     * While running, read from the network (i.e. the tablet) and forward
     * resulting requests to the dispatcher. We accept its responses and forward back to the tablet.
     * Communication with the tablet consists of simple strings, plus a 4-character header.
     *
     * A few messages are intercepted that cause a quick shutdown. These are direct responses
     * to user input, like "shutdown".
     */
    @DelicateCoroutinesApi
    override suspend fun execute(): Unit=coroutineScope {
        if(!running) {
            LOGGER.info(String.format("%s.execute: started...", CLSS))
            running=true
            /* First connect to the network (always LOCALHOST) */
            val serverSocket = ServerSocket(port)
            LOGGER.info(String.format("%s.execute: server socket created on %s (%d)", CLSS,
                serverSocket.inetAddress.canonicalHostName,serverSocket.localPort))

            /* We can connect with multiple clients, but only one at a time */
            job=scope.launch(Dispatchers.IO) {
                while (running) {
                    LOGGER.info(String.format("%s.execute: waiting to accept client connection ...", CLSS))
                    val socket = serverSocket.accept()
                    LOGGER.info(String.format("%s.execute: accepted client socket %s (%d)", CLSS,
                        socket.inetAddress.canonicalHostName, socket.port))
                    connected = CompletableDeferred<Boolean>(true)
                    val handler = SocketMessageHandler(socket!!, connected)
                    while (!socket.isClosed) {
                        select<MessageBottle> {
                            responseChannel.onReceive() { it ->
                                if (!it.type.equals(RequestType.NOTIFICATION) &&  // Ignore notifications
                                    !it.type.equals(RequestType.NONE)) {          // Ignore type NONE
                                    handler.sendResponse(it)
                                }
                                it
                            }
                            /**
                             * Read from the tablet via the network. Use ANTLR to convert text into requests.
                             * Forward requests to the Dispatcher launcher.
                             */
                            handleNetworkInput(handler).onAwait() { it }
                            /*
							 * Handle case where connected client disappears
							 */
                            connected.onAwait() { it->
                                if( !it ) {
                                    LOGGER.info(String.format("%s.execute: client disconnected",CLSS))
                                    socket.close()
                                }
                                MessageBottle(RequestType.NONE)
                            }
                        }
                    }
                    LOGGER.info(String.format("%s.execute: select complete - wait for new connection", CLSS))
                    if (!socket.isClosed) socket.close()
                    delay(DELAY)
                }
                // No longer running
                serverSocket.close()
            }
            LOGGER.info(String.format("%s.execute: Complete ", CLSS))
        }
        else {
            LOGGER.warning(String.format("%s: attempted to start, but already running...", CLSS))
        }
    }

    override suspend fun shutdown() {
        if(running) {
            running=false
            job.cancel()
        }
    }

    // We handle the command to sleep and awake immediately.
    private fun handleLocalRequest(request: MessageBottle): MessageBottle {
        if(request.type.equals(RequestType.COMMAND)) {
            val command: CommandType=request.command
            LOGGER.warning(String.format("%s.handleLocalRequest: command=%s", CLSS, command))
            if(command.equals(CommandType.SLEEP)) {
                ignoring=true
            }
            else if(command.equals(CommandType.WAKE)) {
                ignoring=false
            }
            else {
                val msg=String.format("I don't recognize command %s", command)
                request.error=msg
            }
        }
        request.text=messageTranslator.randomAcknowledgement()
        return request
    }

    /**
     * Read from stdin, blocked. Use ANTLR to convert text into a message bottle.
     * async returns  a deferred value.
     */
    @DelicateCoroutinesApi
    fun handleNetworkInput(handler:SocketMessageHandler): Deferred<MessageBottle> =
    GlobalScope.async(Dispatchers.IO) {
        val msg=handler.receiveRequest()
        if(isLocalRequest(msg)) {
            handleLocalRequest(msg)
        }
        else {
            requestChannel.send(msg)
        }
        msg
    }



    // Local requests are those that can be handled immediately without forwarding to the dispatcher.
    private fun isLocalRequest(request: MessageBottle): Boolean {
        if (request.type.equals(RequestType.COMMAND)) {
            val cmd = request.command
            if (cmd == CommandType.SLEEP || cmd == CommandType.WAKE) {
                return true
            }
        }
        return false
    }

    private val CLSS = "Command"
    private val DELAY = 2000L
    private val DEBUG: Boolean
    private val LOGGER = Logger.getLogger(CLSS)
    private val LOCALHOST = "127.0.0.1"
    override val controllerName = CLSS
    override val controllerType = ControllerType.COMMAND

    init {
        DEBUG = RobotModel.debug.contains(ConfigurationConstants.DEBUG_COMMAND)
        connected = CompletableDeferred<Boolean>(false)
        ignoring = false
        running = false
        messageTranslator = MessageTranslator()
        host = LOCALHOST
        port = RobotModel.getPropertyForController(controllerType, ConfigurationConstants.PROPERTY_PORT).toInt()
        LOGGER.info(String.format("%s.init: %s on %s",CLSS,host,port))
        job = Job()
    }
}
