/**
 * Copyright 2022-2024 Charles Coughlin. All Rights Reserved.
 * MIT License.
 */
package chuckcoughlin.bert.command

import chuckcoughlin.bert.common.controller.Controller
import chuckcoughlin.bert.common.controller.ControllerType
import chuckcoughlin.bert.common.message.BottleConstants
import chuckcoughlin.bert.common.message.CommandType
import chuckcoughlin.bert.common.message.MessageBottle
import chuckcoughlin.bert.common.message.MessageType
import chuckcoughlin.bert.common.message.RequestType
import chuckcoughlin.bert.common.model.ConfigurationConstants
import chuckcoughlin.bert.common.model.RobotModel
import chuckcoughlin.bert.speech.process.MessageTranslator
import kotlinx.coroutines.Deferred
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.async
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.selects.select
import java.net.ServerSocket
import java.util.logging.Level
import java.util.logging.Logger

/**
 * This is the class that handles spoken commands and forwards
 * them on to the central dispatcher. It also handles database actions
 * involving playback and record.
 *
 * This class routes requests/responses between the Dispatcher and a TCP network (wifi).
 * Communication with the Dispatcher is via Kotlin channels and communication with
 * the network is via a TCP socket.
 *
 * If there is no network connection configured, this class is not called
 * by the dispatcher.
 *
 * @param req - channel for dispatcher requests as generated by the user
 * @param rsp - channel for responses from the parent (Dispatcher)
 */
class Command(req : Channel<MessageBottle>,rsp: Channel<MessageBottle>) :Controller {
    private val host:String
    private val port:Int
    private val translator: MessageTranslator
    private var requestChannel=req     // Command->Dispatcher  (requests initiated by user)
    private var responseChannel=rsp    // Dispatcher->Command  (results of user requests)

    @DelicateCoroutinesApi
    private val scope=GlobalScope // For long-running coroutines
    private var ignoring: Boolean
    private var connected: Boolean
    private var running: Boolean
    private var job: Job
    var startMessage = "Starting ..."

    /**
     * While running, read from the network (i.e. the tablet) and forward
     * resulting requests to the dispatcher. We accept its responses and forward back to the tablet.
     * Communication with the tablet consists of simple strings, plus a 4-character header.
     *
     * A few messages are intercepted that cause a quick shutdown. These are direct responses
     * to user input, like "shutdown".
     */
    @DelicateCoroutinesApi
    override suspend fun execute(): Unit=coroutineScope {
        if(!running) {
            LOGGER.info(String.format("%s.execute: started...", CLSS))
            running = true
            /* First connect to the network (always LOCALHOST) */
            try {
                val serverSocket = ServerSocket(port)
                LOGGER.info(String.format("%s.execute: server socket created on %s (%d)", CLSS,
                    serverSocket.inetAddress.canonicalHostName, serverSocket.localPort))

                /* We can connect with multiple clients, but only one at a time */
                job = scope.launch(Dispatchers.IO) {
                    while (running) {
                        LOGGER.info(String.format("%s.execute: waiting to accept client connection ...", CLSS))
                        try {
                            val socket = serverSocket.accept()
                            LOGGER.info(String.format("%s.execute: accepted client socket %s (%d)", CLSS,
                                socket.inetAddress.canonicalHostName, socket.port))
                            connected = true
                            val handler = CommandMessageHandler(socket!!)
                            sendStartupMessage(handler)
                            while (connected) {
                                select<MessageBottle> {
                                    responseChannel.onReceive() {           // Receive from dispatcher
                                        handleRequest(it,handler)
                                        it
                                    }
                                    handleResponse(handler).onAwait() {it}  // Send to tablet
                                }  // End select
                            }
                            LOGGER.info(String.format("%s.execute: select complete - wait for new connection", CLSS))
                            if (!socket.isClosed) {
                                socket.close()
                            }

                        }
                        catch(ex:Exception ) {
                            LOGGER.log(Level.INFO, ex.message, ex);
                            LOGGER.info(String.format("%s: WARNING: failed to accept client connection on %d (%s)", CLSS,port,ex.message))
                            delay(DELAY)
                        }
                        delay(DELAY)
                    }
                    // No longer running
                    serverSocket.close()
                }
                LOGGER.info(String.format("%s.execute: Complete ", CLSS))
            }
            catch( ex:Exception ) {
                LOGGER.warning(String.format("%s: Error creating socket server, localhost port %d (%s)", CLSS,port,ex.localizedMessage))
                running = false
            }
        }
        else {
            LOGGER.warning(String.format("%s: attempted to start, but already running...", CLSS))
        }
    }

    override suspend fun shutdown() {
        if(running) {
            running=false
            job.cancel()
        }
    }

    /**
     * We have received a message from the dispatcher. Forward it to the socket.
     * This includes notifications.
     */
    private fun handleRequest(msg:MessageBottle,handler:CommandMessageHandler)  {
        if(!msg.type.equals(RequestType.NONE)) {       // Ignore type NONE
            connected = handler.sendResponse(msg)
        }
    }

    /**
     * Wait to receive a message from the socket. Forward it to the dispatcher.
     */
    @DelicateCoroutinesApi
    fun handleResponse(handler:CommandMessageHandler): Deferred<MessageBottle> =
        GlobalScope.async(Dispatchers.IO) {
            /**
             * Read from the tablet via the network. Use ANTLR to convert text into requests.
             * Send requests to the Dispatcher channel.
             */
            val msg = handler.receiveNetworkInput()
            LOGGER.info(String.format("%s.handleResponse: received %s from socket (%s)", CLSS,msg.type.name,msg.text))
            if(isHangup(msg) ) {
                connected = false
            }
            else if(isLocalRequest(msg)) {
                handleLocalRequest(handler,msg)
            }
            else {
                LOGGER.info(String.format("%s.handleResponse: sending to dispatcher (%s)", CLSS, msg.type.name))
                requestChannel.send(msg)
            }
            msg
        }

    // This must be synched with isLocalRequest()
    private fun handleLocalRequest(handler:CommandMessageHandler,request: MessageBottle) {
        if( !request.error.equals(BottleConstants.NO_ERROR)) {
            sendResponse(handler,request.error)
        }
        // Programming error of some kind
        else if( request.type.equals(RequestType.NONE)) {
            LOGGER.warning(String.format("%s.handleLocalRequest: %s type, doing nothing (%s)",CLSS,
                                            request.type.name,translator.messageToText(request)))
        }
        else if(request.type.equals(RequestType.COMMAND)) {
            val command: CommandType = request.command
            LOGGER.warning(String.format("%s.handleLocalRequest: command=%s", CLSS, command))
            if(command.equals(CommandType.SLEEP)) {
                ignoring=true
            }
            else if(command.equals(CommandType.WAKE)) {
                ignoring=false
            }
            else {
                val msg=String.format("I don't recognize command %s", command)
                request.error=msg
            }
        }
        // Notification - simply log and send to client
        else if (request.type.equals(RequestType.NOTIFICATION)) {
            LOGGER.info(String.format("TABLET LOG: %s",request.text))
            sendResponse(handler,request.text)
        }
        else {
            sendResponse(handler,translator.randomAcknowledgement())
        }
    }
    /*
     * The message reader has received an EOF
     */
    private fun isHangup(msg:MessageBottle ):Boolean {
        if( msg.type==RequestType.HANGUP) return true
        return false
    }
    /* Local requests are those that can be handled immediately without forwarding to the dispatcher.
     * This includes requests that contain errors or are simply notifications.
     */
    private fun isLocalRequest(request: MessageBottle): Boolean {
        if (request.type.equals(RequestType.NONE)) {
            return true
        }
        else if( !request.error.equals(BottleConstants.NO_ERROR)) {
            return true
        }
        else if (request.type.equals(RequestType.COMMAND)) {
            val cmd = request.command
            if (cmd == CommandType.SLEEP || cmd == CommandType.WAKE) {
                return true
            }
        }
        else if (request.type.equals(RequestType.NOTIFICATION)) {
            return true
        }
        return false
    }

    fun sendResponse(handler:CommandMessageHandler,txt:String) {
        val text = String.format("%s:%s",MessageType.ANS.name,txt)
        handler.sendText(text)
    }

    /** Send a startup message directly to the socket **/
    fun sendStartupMessage(handler:CommandMessageHandler) {
        val text = String.format("%s:%s",MessageType.ANS.name,startMessage)
        handler.sendText(text)
    }

    private val CLSS = "Command"
    private val DELAY = 2000L
    private val DEBUG: Boolean
    private val LOGGER = Logger.getLogger(CLSS)
    private val LOCALHOST = "127.0.0.1"
    override val controllerName = CLSS
    override val controllerType = ControllerType.COMMAND

    init {
        DEBUG = RobotModel.debug.contains(ConfigurationConstants.DEBUG_COMMAND)
        ignoring = false
        connected = false
        running = false
        translator = MessageTranslator()
        host = LOCALHOST
        port = RobotModel.getPropertyForController(controllerType, ConfigurationConstants.PROPERTY_PORT).toInt()
        LOGGER.info(String.format("%s.init: %s on %s",CLSS,host,port))
        job = Job()
    }
}
