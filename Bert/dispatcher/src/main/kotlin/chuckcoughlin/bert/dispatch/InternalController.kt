/**
 * Copyright 2022-2024. Charles Coughlin. All Rights Reserved.
 * MIT License.
 */
package chuckcoughlin.bert.dispatch
import chuckcoughlin.bert.common.controller.ControllerType
import chuckcoughlin.bert.common.controller.MessageController
import chuckcoughlin.bert.common.message.MessageBottle
import chuckcoughlin.bert.common.model.ConfigurationConstants
import chuckcoughlin.bert.common.model.RobotModel
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.Channel
import java.util.logging.Logger

/**
 * The internal controller is used to implement delays in messages destined for the
 * motor controllers. The delays are both configured and designed to prevent commands
 * being sent too quickly. All messages are returned to the Dispatcher (which then
 * distributes them to the intended targets).
 *
 * In the future this controller will be used to delay movements that interfere with
 * other movements in progress, or stop movements that may cause collisions between
 * separate appendages.
 *
 * Messages are executed in the order they are received.
 */
class InternalController(parent : Dispatcher,req: Channel<MessageBottle>,rsp: Channel<MessageBottle>) :
                                                        MessageController {
    private val dispatcher = parent
    private val scope = GlobalScope     // For long-running coroutines
    private var toDispatcher   = req    // Internal->Dispatcher  (dispatcher gets results)
    private var fromDispatcher = rsp    // Dispatcher->Internal
    private val timedQueue: TimedQueue
    private var running:Boolean
    private var index:Long          // Sequence of a message
    private var job:Job

    @DelicateCoroutinesApi
    override suspend fun execute() {
        if (!running) {

            LOGGER.info(String.format("%s.execute: started...", CLSS))
            running = true
            //timedQueue.execute()
            /* Coroutine to accept requests from the Dispatcher.
             * New requests are either placed on one of the sequential queues
             * or the timed queue
             */
            job = scope.launch(Dispatchers.IO) {
                timedQueue.execute()
                LOGGER.info(String.format("%s.execute: launched...", CLSS))
                while (running) {
                    val msg = fromDispatcher.receive()
                    if (DEBUG) LOGGER.info(String.format("%s.execute received: %s (%s)", CLSS, msg.type.name,msg.text))
                    handleRequest(msg)
                }
            }
        }
        else {
            LOGGER.warning(String.format("%s.execute: attempted to start, but already running...", CLSS))
        }
    }

    override suspend fun shutdown() {
        if (DEBUG) println(String.format("%s.shutdown: shutting down ... ", CLSS))
        if( running ) {
            running = false
            timedQueue.stop()
            job.cancel()
            if (DEBUG) println(String.format("%s.shutdown: cancelled job ", CLSS))
        }
    }

    /**
     * All requests to the InternalController are generated by the dispatcher or dispatcher's solver.
     * This class determines how we handle them. If there is no limb specified
     * then the message is placed on the NONE limb and from there directly to the timer queue.
     * @param request incoming message holder
     */
    private suspend fun handleRequest(msg: MessageBottle) {
        timedQueue.addMessage(msg)
    }


    /**
     * Called by the timer queue once the message is ready to execute. Forward to the
     * dispatcher for actual processing. Retain the source as the original source of
     * the message. This allows the dispatcher to forward the response to the proper
     * requestor.
     * @param holder
     */
    override suspend fun dispatchMessage(msg:MessageBottle) {
        if (DEBUG) LOGGER.info(String.format("%s.dispatchMessage sending to dispatcher: %s", CLSS, msg.type.name))
        toDispatcher.send(msg)
    }

    private val CLSS = "InternalController"
    private val DEBUG : Boolean
    private val LOGGER = Logger.getLogger(CLSS)
    override val controllerName = CLSS
    override val controllerType = ControllerType.INTERNAL

    init {
        DEBUG = RobotModel.debug.contains(ConfigurationConstants.DEBUG_INTERNAL)
        running = false
        index = 0
        job = Job() // Parent job
        timedQueue = TimedQueue(this)
    }
}