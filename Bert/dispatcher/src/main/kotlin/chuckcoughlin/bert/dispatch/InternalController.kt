/**
 * Copyright 2022-2024. Charles Coughlin. All Rights Reserved.
 * MIT License.
 */
package chuckcoughlin.bert.dispatch
import chuckcoughlin.bert.common.controller.ControllerType
import chuckcoughlin.bert.common.controller.MessageController
import chuckcoughlin.bert.common.message.MessageBottle
import chuckcoughlin.bert.common.message.RequestType
import chuckcoughlin.bert.common.model.ConfigurationConstants
import chuckcoughlin.bert.common.model.Limb
import chuckcoughlin.bert.common.model.RobotModel
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.Channel
import java.util.logging.Logger

/**
 * A timer controller accepts a RequestBottle and submits it to the parent
 * Dispatcher on a clocked basis.
 */
class InternalController(parent : Dispatcher,req: Channel<MessageBottle>,rsp: Channel<MessageBottle>) :
                                                        MessageController {
    private val dispatcher = parent
    private val scope = GlobalScope     // For long-running coroutines
    private var toDispatcher   = req    // Internal->Dispatcher  (dispatcher gets results)
    private var fromDispatcher = rsp    // Dispatcher->Internal
    private val timedQueue: TimedQueue
    private val sequentialQueues: MutableMap<Limb, SequentialQueue>
    private var running:Boolean
    private var index:Long          // Sequence of a message
    private var job:Job

    @DelicateCoroutinesApi
    override suspend fun execute() {
        if (!running) {
            LOGGER.info(String.format("%s.execute: started...", CLSS))
            running = true
            timedQueue.execute()
            /* Coroutine to accept requests from the Dispatcher.
             * New requests are either placed on one of the sequential queues
             * or the timed queue
             */
            job = scope.launch(Dispatchers.IO) {
                while (running) {
                    val msg = fromDispatcher.receive()
                    if (DEBUG) LOGGER.info(String.format("%s.execute received: %s (%s)", CLSS, msg.type.name,msg.text))
                    handleRequest(msg)
                }
            }
        }
        else {
            LOGGER.warning(String.format("%s.execute: attempted to start, but already running...", CLSS))
        }
    }

    override suspend fun shutdown() {
        if (DEBUG) println(String.format("%s.shutdown: shutting down ... ", CLSS))
        if( running ) {
            running = false
            timedQueue.stop()
            if (DEBUG) println(String.format("%s.shutdown: cancel timed queue ", CLSS))
            job.cancelAndJoin()
            if (DEBUG) println(String.format("%s.shutdown: cancelled job ", CLSS))
        }
    }

    /*
     * Check the sequential queues for any that have messages ready to process.
     * Place any ready messages onto the timed queue.
     */
    private fun evaluateQueues() {
        for (sq: SequentialQueue in sequentialQueues.values) {
            if (sq.locked == false && sq.isNotEmpty()) {
                val msg = sq.removeFirst()
                timedQueue.addMessage(msg,true)
            }
        }
    }
    /**
     * All requests to the InternalController are generated by the dispatcher or dispatcher's solver.
     * This class determines how we handle them. If there is no limb specified
     * then the message is placed on the NONE limb and from there directly to the timer queue.
     * @param request incoming message holder
     */
    private suspend fun handleRequest(msg: MessageBottle) {
        // A SYNC message simply unlocks the work queue
        if(msg.type.equals(RequestType.SYNC)) {
            sequentialQueues[msg.limb]!!.locked = false
        }
        // New request to add to the queue
        else {
            val now = System.currentTimeMillis()
            msg.control.executionTime = now + msg.control.delay
            msg.control.id = index
            index = index++
            val limb = msg.limb
            var queue: SequentialQueue? = sequentialQueues[limb]
            if (queue != null) {
                if (DEBUG) LOGGER.info(String.format("%s.handleRequest %s on %s (%s)", CLSS, msg.type.name,
                            limb.name, if (queue.locked) "IN PROGRESS" else "IDLE"))
                queue.addLast(msg)
            }
            else {
                LOGGER.severe(String.format("%s.handleRequest No queue for limb", CLSS, limb.name))
            }
        }
        evaluateQueues()
    }


    /**
     * Called by the timer queue once the message is ready to execute. Forward to the
     * dispatcher for actual processing. Mark the source as INTERNAL so
     * that the dispatcher knows to return the message here once processing is complete.
     * @param holder
     */
    override suspend fun dispatchMessage(msg:MessageBottle) {
        msg.source = ControllerType.INTERNAL.name
        if (DEBUG) LOGGER.info(String.format("%s.dispatchMessage sending to dispatcher: %s", CLSS, msg.type.name))
        toDispatcher.send(msg)
    }

    private val CLSS = "InternalController"
    private val DEBUG : Boolean
    private val LOGGER = Logger.getLogger(CLSS)
    override val controllerName = CLSS
    override val controllerType = ControllerType.INTERNAL

    init {
        DEBUG = RobotModel.debug.contains(ConfigurationConstants.DEBUG_INTERNAL)
        running = false
        index = 0
        job = Job() // Parent job
        timedQueue = TimedQueue(this)
        sequentialQueues = HashMap<Limb,SequentialQueue>()
        // Create a queue for each limb
        for(limb in Limb.values()) {
            sequentialQueues[limb] = SequentialQueue()
        }
    }
}