From 8ecaff0464bec2b6deb1538b3cb6b6d322cc0ac4 Mon Sep 17 00:00:00 2001
From: Paul Fitzpatrick <paulfitz@alum.mit.edu>
Date: Fri, 11 Apr 2014 17:02:57 +0200
Subject: [PATCH 13/22] [ros] change XmlRpc namespace to avoid conflict

YARP and ROS both use the XmlRpc++ library.  When YARP is
compiled statically, these libraries can conflict if the
user is also linking ROS.  (This is not a problem when
YARP is compiled as a shared library, where the
XmlRpc-related symbols are not exposed).  To support
static linking, the XmlRpc namespace in YARP is renamed
to YarpXmlRpc.  See #167
---
 extern/xmlrpcpp/xmlrpcpp/XmlRpc.h                   | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcClient.cpp           | 2 +-
 extern/xmlrpcpp/xmlrpcpp/XmlRpcClient.h             | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcException.h          | 2 +-
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServer.cpp           | 2 +-
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServer.h             | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServerConnection.cpp | 2 +-
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServerConnection.h   | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServerMethod.cpp     | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServerMethod.h       | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcSource.cpp           | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcSource.h             | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcUtil.cpp             | 8 ++++----
 extern/xmlrpcpp/xmlrpcpp/XmlRpcUtil.h               | 4 ++--
 extern/xmlrpcpp/xmlrpcpp/XmlRpcValue.cpp            | 6 +++---
 extern/xmlrpcpp/xmlrpcpp/XmlRpcValue.h              | 6 +++---
 16 files changed, 32 insertions(+), 32 deletions(-)

diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpc.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpc.h
index 6810b0b..f168b53 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpc.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpc.h
@@ -35,7 +35,7 @@
 #include "XmlRpcValue.h"
 #include "XmlRpcUtil.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   //! An interface allowing custom handling of error message reporting.
@@ -96,6 +96,6 @@ namespace XmlRpc {
   //! Version identifier
   extern const char XMLRPC_VERSION[];
 
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif // _XMLRPC_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
index d31ffb5..98eb5f3 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
@@ -12,7 +12,7 @@
 #include <string.h>
 
 
-using namespace XmlRpc;
+using namespace YarpXmlRpc;
 
 // Static data
 const char XmlRpcClient::REQUEST_BEGIN[] = 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
index 6596618..b7775c2 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
@@ -17,7 +17,7 @@
 
 #include "XmlRpcSource.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   // Arguments and results are represented by XmlRpcValues
   class XmlRpcValue;
@@ -125,6 +125,6 @@ namespace XmlRpc {
 
   };	// class XmlRpcClient
 
-}	// namespace XmlRpc
+}	// namespace YarpXmlRpc
 
 #endif	// _XMLRPCCLIENT_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcException.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcException.h
index 31b6409..bef8ae1 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcException.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcException.h
@@ -16,7 +16,7 @@
 #endif
 
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   //! A class representing an error.
   //! If server methods throw this exception, a fault response is returned
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
index bd4f582..a07bc2d 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
@@ -9,7 +9,7 @@
 #include "XmlRpcException.h"
 
 
-using namespace XmlRpc;
+using namespace YarpXmlRpc;
 
 
 XmlRpcServer::XmlRpcServer()
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
index 16bb4a4..41f2352 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
@@ -19,7 +19,7 @@
 //#include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   // An abstract class supporting XML RPC methods
@@ -102,6 +102,6 @@ namespace XmlRpc {
     XmlRpcServerMethod* _methodHelp;
 
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif //_XMLRPCSERVER_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
index 73f3681..92b88d9 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
@@ -11,7 +11,7 @@
 # include <string.h>
 #endif
 
-using namespace XmlRpc;
+using namespace YarpXmlRpc;
 
 // Static data
 const char XmlRpcServerConnection::METHODNAME_TAG[] = "<methodName>";
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
index b388aa2..69916c5 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
@@ -17,7 +17,7 @@
 #include "XmlRpcValue.h"
 #include "XmlRpcSource.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   // The server waits for client connections and provides methods
@@ -107,6 +107,6 @@ namespace XmlRpc {
     // Whether to keep the current client connection open for further requests
     bool _keepAlive;
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif // _XMLRPCSERVERCONNECTION_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.cpp
index 1dbed4d..041a7c2 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.cpp
@@ -5,7 +5,7 @@
 #include "XmlRpcServerMethod.h"
 #include "XmlRpcServer.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   XmlRpcServerMethod::XmlRpcServerMethod(std::string const& name, XmlRpcServer* server)
@@ -21,4 +21,4 @@ namespace XmlRpc {
   }
 
 
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.h
index 9332ebd..5149e1b 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerMethod.h
@@ -16,7 +16,7 @@
 # include <string>
 #endif
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   // Representation of a parameter or result value
   class XmlRpcValue;
@@ -46,6 +46,6 @@ namespace XmlRpc {
     std::string _name;
     XmlRpcServer* _server;
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif // _XMLRPCSERVERMETHOD_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
index 52da4f3..f490b0f 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
@@ -5,7 +5,7 @@
 #include "XmlRpcSource.h"
 #include "XmlRpcUtil.h"
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   XmlRpcSource::XmlRpcSource(int fd /*= -1*/, bool deleteOnClose /*= false*/) 
@@ -28,4 +28,4 @@ namespace XmlRpc {
     }
   }
 
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.h
index 5ad5cbb..4933cb5 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.h
@@ -11,7 +11,7 @@
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   //! An RPC source represents a file descriptor to monitor
   class XmlRpcSource {
@@ -53,6 +53,6 @@ namespace XmlRpc {
     // In the client, keep connections open if you intend to make multiple calls.
     bool _keepOpen;
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif //_XMLRPCSOURCE_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.cpp
index 8a60e2c..c1bb193 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.cpp
@@ -14,7 +14,7 @@
 
 #include "XmlRpc.h"
 
-using namespace XmlRpc;
+using namespace YarpXmlRpc;
 
 
 //#define USE_WINDOWS_DEBUG // To make the error and log messages go to VC++ debug output
@@ -24,7 +24,7 @@ using namespace XmlRpc;
 #endif
 
 // Version id
-const char XmlRpc::XMLRPC_VERSION[] = "XMLRPC++ 0.7";
+const char YarpXmlRpc::XMLRPC_VERSION[] = "XMLRPC++ 0.7";
 
 // Default log verbosity: 0 for no messages through 5 (writes everything)
 int XmlRpcLogHandler::_verbosity = 0;
@@ -66,8 +66,8 @@ XmlRpcErrorHandler* XmlRpcErrorHandler::_errorHandler = &defaultErrorHandler;
 
 
 // Easy API for log verbosity
-int XmlRpc::getVerbosity() { return XmlRpcLogHandler::getVerbosity(); }
-void XmlRpc::setVerbosity(int level) { XmlRpcLogHandler::setVerbosity(level); }
+int YarpXmlRpc::getVerbosity() { return XmlRpcLogHandler::getVerbosity(); }
+void YarpXmlRpc::setVerbosity(int level) { XmlRpcLogHandler::setVerbosity(level); }
 
  
 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.h
index e48e6a0..b48a681 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcUtil.h
@@ -24,7 +24,7 @@
 # define strncasecmp strnicmp
 #endif
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   //! Utilities for XML parsing, encoding, and decoding and message handlers.
   class XmlRpcUtil {
@@ -59,6 +59,6 @@ namespace XmlRpc {
     static void error(const char* fmt, ...);
 
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 #endif // _XMLRPCUTIL_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.cpp
index 26bc55e..7efb039 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.cpp
@@ -18,7 +18,7 @@
 # include <stdio.h>
 #endif
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
 
   static const char VALUE_TAG[]     = "<value>";
@@ -618,11 +618,11 @@ namespace XmlRpc {
     return os;
   }
 
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 
 // ostream
-std::ostream& operator<<(std::ostream& os, XmlRpc::XmlRpcValue& v) 
+std::ostream& operator<<(std::ostream& os, YarpXmlRpc::XmlRpcValue& v) 
 { 
   // If you want to output in xml format:
   //return os << v.toXml(); 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
index b68fbdb..fae12c2 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
@@ -18,7 +18,7 @@
 # include <time.h>
 #endif
 
-namespace XmlRpc {
+namespace YarpXmlRpc {
 
   //! RPC method arguments and results are represented by Values
   //   should probably refcount them...
@@ -184,10 +184,10 @@ namespace XmlRpc {
     } _value;
     
   };
-} // namespace XmlRpc
+} // namespace YarpXmlRpc
 
 
-std::ostream& operator<<(std::ostream& os, XmlRpc::XmlRpcValue& v);
+std::ostream& operator<<(std::ostream& os, YarpXmlRpc::XmlRpcValue& v);
 
 
 #endif // _XMLRPCVALUE_H_
-- 
2.9.3

