<module>
    <!-- module's name should match its executable file's name. -->
    <name>motionCUT</name>
    <description>The module exploits the pyramidal Lucas-Kanade algorithm to detect independent moving points over a selectable grid of nodes. The algorithm is designed in such a way that it works also - and especially - with moving cameras. </description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="[OLD?]specifies the stem name of ports created by the module" default="motionCUT"> name </param>
        <param desc="Portion of the x-axis of the image covered by the grid nodes. Example: if the value is 0.75, then the central 3/4 of the x-axis will be covered with points." default=""> coverXratio </param>
        <param desc="Portion of the y-axis of the image covered by the grid nodes. Example: if the value is 0.75, then the central 3/4 of the y-axis will be covered with points." default=""> coverYratio </param>
        <param desc="Step (in pixels) between two consecutive grid nodes." default=""> nodesStep </param>
        <param desc="Window size used by the algorithm." default=""> winSize </param>
        <param desc="Error threshold (in percentage) that allows discriminating between background and independent moving nodes as result of a matching carried out on the windows whose size is determined by 'winSize' parameter. Usually very small values, such as 0.5%, have to be used. Indicatively, a value of 0.5% means that the two templates for the matching must have a similarity measure of 99.5% to prevent the relative node from being recognized as  independent moving node.selects the step in pixels between two consecutive grid nodes." default=""> recogThres </param>
        <param desc="This parameter allows filtering out the \e salt-and-pepper noise over the output image, by specifying the minimum number of adjacent nodes that must be active (i.e. that undergo the motion) in the neighbourhood of any single node to keep it active." default=""> adjNodesThres </param>
        <param desc="This parameter allows filtering out blobs whose nodes number is lower than the provided value." default=""> blobMinSizeThres </param>
        <param desc="This parameter allows increasing the node persistence over consecutive frames implementing a sort of low-pass filter. Its value specifies the number of consecutive frames for which if a node gets active it is kept on." default=""> framesPersistence </param>
        <param desc="This parameter allows changing the size of a cropping window around the center of the largest blob detected, which will be then sent out through the corresponding port." default=""> cropRadius </param>
        <param desc="This parameter allows controlling the maximum number of
  threads allocated by parallelized OpenCV functions. This
  option is available only if the OpenMP layer is supported. By
  contrast, the TBB layer automatically determines the number of
  threads.\n
  \e #  > 0 : assign # threads to OpenCV; \n
  \e # == 0 : assign all threads to OpenCV; \n
  \e #  < 0 : assign all threads but # to OpenCV; \n
  The default value is -1 meaning that all threads equal to the
  number of available cores BUT ONE will be used." default=""> numThreads </param>
        <switch>verbosity</switch>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="carlo.ciliberto@iit.it"> Carlo Ciliberto </author>
        <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
    </authors>

    <!-- <data> can have multiple <input> or <output> tags. -->
    <data>
        <!-- input data if available-->
        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>Image</type>

            <!-- input port which receive the data. -->
            <port carrier="udp">/motionCUT/img:i</port>

            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>yes</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>Accepts the incoming images</description>
        </input>
        <input>
            <type>Rpc</type>
            <port carrier="tcp">/motionCUT/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>The parameters winSize, recogThres, adjNodesThres, framesPersistence, numThreads, verbosity can be changed/retrieved through the commands set/get. Moreover the further switch \e inhibition can be accessed in order to enable/disable the motion detection at run-time. </description>
        </input>

        <!-- output datas if available -->
        <output>
            <type>Image</type>
            <port carrier="udp">/motionCUT/img:o</port>
            <description>Outputs the input images with the grid layer on top. This port propagates the time-stamp carried by the input image.</description>
        </output>
        <output>
            <type>Bottle</type>
            <port carrier="udp">/motionCUT/nodes:o</port>
            <description>Outputs the input x-y location of the currently active nodes in this format: (nodesStep 'val') ('n0.x' 'n0.y') ('n1.x' 'n1.y') ... . This port propagates the time-stamp carried by the input image.</description>
        </output>
        <output>
            <type>Bottle</type>
            <port carrier="udp">/motionCUT/blobs:o</port>
            <description>Outputs the input x-y location of blobs centroids along with their size in this format: ('b0.cx' 'b0.cy' 'b0.size') ('b1.cx' 'b1.cy' 'b1.size') ... The output blobs list is sorted according to their size (decreasing order). . This port propagates the time-stamp carried by the input image.</description>
        </output>
        <output>
            <type>Image?</type>
            <port carrier="udp">/motionCUT/crop:o</port>
            <description>outputs a window of fixed size obtained from
  a ROI around the center of mass of the largest blob detected.</description>
        </output>
        <output>
            <type>ImageGrayscale</type>
            <port carrier="udp">/motionCUT/opt:o</port>
            <description>Outputs monochrome images containing just the grid nodes signalling independent movements. This port propagates the time-stamp carried by the input image.</description>
        </output>
    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library></library>
    </development>

</module>
