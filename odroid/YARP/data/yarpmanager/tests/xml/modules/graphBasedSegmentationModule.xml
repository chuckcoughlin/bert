<module>
    <!-- module's name should match its executable file's name. -->
    <name>graphBasedSegmentation</name>
    <description>Wrapper module that performs graph-based image segmentation exploiting the algorithm developed by Felzenszwalb and Huttenlocher (Brown University).</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="name of the module (for opened ports)"> name </param>
<param default="0.8" desc="smoothing parameter (standard deviation of a Gaussian filter used to pre-process image, in order to compensate
for digitization artifacts)"> sigma </param>
<param default="700" desc="scale factor for boundary-detection threshold function (a larger k causes a preference for larger components)"> k </param>
<param default="700" desc="minumum size of a component"> minRegion </param>
<!-- switch desc="if present, display usage message"> help </switch -->
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="elena.ceseracciu@iit.it"> Elena Ceseracciu </author>
    </authors>

    <!-- <data> can have multiple <input> or <output> tags. -->
    <data>
        <!-- input data if available-->
        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>ImageFrame</type>

            <!-- input port which receive the data. -->
            <port carrier="tcp">rawImg:i</port>

            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>yes</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>yes</priority>
            <description>input port where original images must be sent</description>
        </input>

        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>Rpc</type>

            <port carrier="tcp">conf</port>

            <required>no</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>rpc port, accepts the commands defined in \link graphBasedSegmentationInterface.thrift  graphBasedSegmentationInterface.thrift \endlink and documented \link SegmentationModuleInterface here \endlink</description>
        </input>



        <!-- output datas if available -->
        <output>
            <type>ImageFrame</type>
            <port carrier="tcp">viewImg:o</port>
            <description>output port, where segmented images are sent (one random color for each component)</description>
        </output>
    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library></library>
    </development>

</module>
