<module>
    <!-- module's name should match its executable file's name. -->
    <name>iolRADHelper</name>
    <description>A container collecting useful functions that help RAD accomplishing its tasks.</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="Name of the module" default="iolRADHelper"> name</param>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
    </authors>

    <!-- <data> can have multiple <input> or <output> tags. -->
    <data>

        <input>
            <type>Rpc</type>
            <port carrier="tcp">/iolRADHelper/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>to be accessed by RAD.</description>
        </input>

        <!-- output datas if available -->

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolRADHelper/opc</port>
            <description>Used to communicate with the objects properties collector.</description>
        </output>

    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library>YARP</library>
    </development>

</module>
