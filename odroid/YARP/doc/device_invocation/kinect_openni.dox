/**
 * \ingroup dev_examples
 *
 * \defgroup kinect_openni Example for kinect_device_server and kinect_device_client (kinect_openni)

  Both kinect_device_server and kinect_device_client implement the yarp::dev::IKinectDeviceDriver interface. The kinect_device_server is used on a computer where the Kinect sensor is connected locally. The kinect_device_client is used on a computer accessing a remote Kinect sensor.

Instantiation of the \ref cmd_device_kinect_device_server  device implemented by yarp::dev::KinectDeviceDriverServer.

To use this device the OpenNI and NITE APIs need to be installed and the CMake build should have been made with the ENABLE_yarpmod_KinectDeviceLocal checked.
The Kinect sensor should be directly connected to the computer being used.

The device can be started with the command:
\verbatim
yarpdev --device KinectDeviceLocal [OPTIONS]
\endverbatim

Of course, the configuration could be passed just as command line options, or as a yarp::os::Property object in a program:
\code
Property p("(device KinectDeviceServer [OPTIONS])");//device started with no options
PolyDriver dev;
dev.open(p);
if (dev.isValid()) { /* use the device via view method */ }
\endcode

The [OPTIONS] should be one of the following:
<table>
<tr><td>OPTION</td><td>DESCRIPTION</td><td>DEFAULT</td></tr>
<tr><td></td><td>The device is simply started</td><td></td></tr>
<tr><td>portPrefix [STRING]</td><td>Creates four ports:<br /><br />
 input port [STRING]:i<br />
 depth camera port [STRING]/detphMap:o<br />
 rgb camera port [STRING]/imageMap:o<br />
 User/Skeleton data port [STRING]/userSkeleton:o</td>
													<td></td></tr>
<tr><td>userDetection</td><td>If this property exists the user/skeleton will be detected</td><td>false</td></tr>
<tr><td>noCameras</td><td>If this property exists the image from the camera will be retrieved (if not the images will be blank)</td><td>true</td></tr>
</table>

For the user/skeleton detection to work the user must stand in front of the camera in the Psi pose. This may take a while depending on several conditions.
The computer  processing performance affects heavily on the skeleton detection algorithm.


Instantiation of the \ref cmd_device_kinect_device_client  device implemented by yarp::dev::KinectDeviceDriverClient.

To use this device the OpenNI and NITE APIs need to be installed and the CMake build should have been made with the ENABLE_yarpmod_KinectDeviceClient checked.
The Kinect sensor should be connected to a computer where the \ref cmd_device_kinect_device_server is running.

The \ref cmd_device_kinect_device_server has to be executed with the ports running by using the property portPrefix described above.

The kinect device client can be started as a yarp::os::Property object in a program:
\code
Property p("(device KinectDeviceClient) (remotePortPrefix [PORT_A]) (localPortPrefix [PORT_B]) (userDetection)");//device started with no options
PolyDriver dev;
dev.open(p);
if (dev.isValid()) { /* use the device via view method */ }
\endcode

 the (userDetection) is optional.
 The [PORT_A] string is the remote ports prefixes and [PORT_B] string is used has port prefix.


 Have fun! All the ideas are welcome!

 */