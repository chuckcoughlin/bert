<project name="AEDModuleBuilder" basedir="../" default="BuildAndInstallModule">

	<import file="${basedir}/AED_Build/build79.xml"/>

	<!-- If you are using svn this will probably work for you.  If not you can
		 figure it out yourself or track it manually :P -->
	<!--<svn>
		<status path="${basedir}" revisionProperty="version.build" />
	</svn>-->
	
	<property name="version.build" value="12" />

	<!-- Change version.beta value to "" for release builds -->
	<property name="version.beta" value="-development" />

	<!-- Uses the version.build property and the version.beta property from build.xml -->
	<property name="AEDModule.version" value="7.0.2.${version.build}" />  
	
	<property name="AEDModule.name" value="AED" />
	<property name="AEDModule.description" value="ExxonMobil Research and Engineering - Abnormal Event Detection / Real-Time Advisory support module from ILS-Automation." />
	<property name="jar.dir" value="${basedir}/../../external/lib" />
	<property name="common.jar.name" value="ils-common.jar" />
	<property name="common.build.dir" value="${basedir}/../../ils-common/bin" />
	<property name="common.src.dir"   value="${basedir}/../../ils-common/ILS_Common/src" />
	<!-- For building the expression parsers -->
	<property name="expression.package" value="com.ils.aed.expression" />
	<property name="expression.src.dir" value="src/com/ils/aed/expression" />
	<property name="bin" value="lib" />
	<property name="lib" value="lib" />
	<property name="src" value="src" />
	<property name="userexpression.dir" value="${basedir}/../antlr/user-expression" /> 
	<property name="userexpression.jar.name"  value="user-expression.jar" />

	<!-- ANTLR jar classpath -->
	<path id="antlr.classpath">
		<pathelement location="${jar.dir}/antlr-4.5.1-complete.jar" />
	</path>

	<!-- Common jar classpath -->
	<!-- the gateway, designer and client modules all depend on the common -->
	<path id="AED_Common.classpath">
		<path refid="ignition.classpath" />
		<path refid="external.classpath" />
	</path>

	<!-- The gateway, designer and clients depend on the API -->
	<!-- Gateway jar classpath -->
	<path id="AED_Gateway.classpath">
		<path refid="external.classpath" />
		<path refid="AED_Common.classpath" />
		<fileset dir="${basedir}/AED_Build/bin/${AEDModule.name}_Common/dist/" includes="*.jar" />
	</path>

	<!-- Client jar classpath -->
	<path id="AED_Client.classpath">
		<path refid="AED_Common.classpath" />
		<fileset dir="${basedir}/AED_Build/bin/${AEDModule.name}_Common/dist/" includes="*.jar" />
	</path>

	<!-- Designer jar classpath -->
	<path id="AED_Designer.classpath">
		<path refid="AED_Common.classpath" />
		<fileset dir="${basedir}/AED_Build/bin/${AEDModule.name}_Common/dist/" includes="*.jar" />
		<fileset dir="${basedir}/AED_Build/bin/${AEDModule.name}_Client/dist/" includes="*.jar" />
	</path>
	
	<!-- This target will build the ILS Common library and deploy it to the local filesystem -->
	<target name="common" depends="buildcommon, jarcommon" />
	<!-- Compile the library -->
	<target name="buildcommon" description="Compile the source">
		<mkdir dir="${common.build.dir}"/>
		<javac destdir="${common.build.dir}" source="1.8" target="1.8" debug="true" debuglevel="lines,vars,source">
			<src path="${common.src.dir}"/>
			<classpath refid="AED_Common.classpath"/>
		</javac>
	</target>

	<target name ="jarcommon" description="Create a jar for the ILS Common library">
		<jar destfile="${jar.dir}/${common.jar.name}" includes="**/*.class" basedir="${common.build.dir}"/>
	</target>

	<!-- This target will build the toolkit module and deploy it to the local Ignition gateway -->
	<target name="BuildAndInstallModule" depends="common,clean, build, deploy" />

	<!-- Cleans all previously built files -->
	<target name="clean" depends="cleancommon" >
		<delete dir="${basedir}/AED_Build/bin" />
		<delete dir="${basedir}/AED_Build/modules" />
		<delete dir="${basedir}/AED_Build/release" />
		<delete dir="${basedir}/AED_Build/temp_modl" />
		<delete dir="${userexpression.dir}/${src}" />
		<delete file="${jar.dir}/${userexpression.jar.name}"/>
	</target>
	
	<!-- Remove the common jar -->
	<target name="cleancommon" description="Remove the common build products">
		<delete file="${common.jar.dir}/${common.jar.name}" />
		<delete failonerror="false">
			<fileset dir="${common.build.dir}">
				<include name="**/*.class"/>
			</fileset>
		</delete>
	</target>
	<!-- Build the UserExpression parser -->
	<target name="userexpression">
		<mkdir dir="${userexpression.dir}/${expression.src.dir}" />
		<mkdir dir="${userexpression.dir}/${lib}" />
		<!-- Run the ANTLR code generator -->
		<java classname="org.antlr.v4.Tool" classpathref="antlr.classpath" fork="true">
			<arg value="-o" />
			<arg path="${userexpression.dir}/${expression.src.dir}" />
			<arg value="-package" />
			<arg value="${expression.package}" />
			<arg value="-lib"/>
			<arg value="${userexpression.dir}/${lib}" />
			<arg value="-visitor" />
			<arg value="-no-listener" />
			<arg value="${userexpression.dir}/UserExpression.g4" />
		</java>
		<!-- Compile the Java code and create a jar. -->
		<mkdir dir="${userexpression.dir}/${bin}"/>
		<javac destdir="${userexpression.dir}/${bin}" source="1.8" target="1.8">
				<src path="${userexpression.dir}/${src}"/>
				<classpath refid="antlr.classpath"/>
		</javac>
		<jar destfile="${jar.dir}/${userexpression.jar.name}"
				basedir="${userexpression.dir}/${bin}"
				includes="**/*.class"
		/>
	</target>

	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="userexpression">
		<echo message="Building ${AEDModule.name} ${AEDModule.version} ..." />

		<!-- build.date and version.build are both defined in build.xml -->
		<echo message="Build date: ${build.date}" />
		<echo message="Build version: ${version.build}" />

		<!-- AED Common jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${AEDModule.name}_Common" />
			<param name="sourceDirFolder" value="${AEDModule.name}_Common" />
			<param name="jarName" value="aed-common" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="${AEDModule.name}_Common.classpath"/>
		</antcall>

		<!-- AED  Gateway jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${AEDModule.name}_Gateway" />
			<param name="sourceDirFolder" value="${AEDModule.name}_Gateway" />
			<param name="jarName" value="aed-gateway" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="${AEDModule.name}_Gateway.classpath"/>
		</antcall>

		<!-- AED Client jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${AEDModule.name}_Client" />
			<param name="sourceDirFolder" value="${AEDModule.name}_Client" />
			<param name="jarName" value="aed-client" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="${AEDModule.name}_Client.classpath"/>
		</antcall>

		<!-- AED Designer jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${AEDModule.name}_Designer" />
			<param name="sourceDirFolder" value="${AEDModule.name}_Designer" />
			<param name="jarName" value="aed-designer" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="${AEDModule.name}_Designer.classpath"/>
		</antcall>

		<!-- Create .modl file -->
		<echo message="Making ${AEDModule.name} modl" />
		<mkdir dir="${basedir}/AED_Build/temp_modl" />
		<mkdir dir="${basedir}/AED_Build/modules" />
		<mkdir dir="${basedir}/AED_Build/doc" />

		<copy file="${basedir}/AED_Build/module-aed-79.xml" tofile="${basedir}/AED_Build/temp_modl/module.xml" overwrite="true" />

		<replace file="${basedir}/AED_Build/temp_modl/module.xml" token="@NAME@" value="${AEDModule.name}" />
		<replace file="${basedir}/AED_Build/temp_modl/module.xml" token="@DESCRIPTION@" value="${AEDModule.description}" />
		<replace file="${basedir}/AED_Build/temp_modl/module.xml" token="@VERSION@" value="${AEDModule.version}" />

		<!-- Pack200 and then copy the designer, client and API jars -->
		<pack200 src="${basedir}/AED_Build/bin/${AEDModule.name}_Designer/dist/aed-designer.jar" destfile="${basedir}/AED_Build/temp_modl/aed-designer.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/AED_Build/bin/${AEDModule.name}_Client/dist/aed-client.jar" destfile="${basedir}/AED_Build/temp_modl/aed-client.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/AED_Build/bin/${AEDModule.name}_Common/dist/aed-common.jar" destfile="${basedir}/AED_Build/temp_modl/aed-common.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/commons-math3-3.6.1.jar" destfile="${basedir}/AED_Build/temp_modl/commons-math3-3.6.1.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/ils-common.jar" destfile="${basedir}/AED_Build/temp_modl/ils-common.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/jackson-annotations-2.2.3.jar" destfile="${basedir}/AED_Build/temp_modl/jackson-annotations-2.2.3.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/jackson-core-2.2.3.jar" destfile="${basedir}/AED_Build/temp_modl/jackson-core-2.2.3.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/jackson-databind-2.2.3.jar" destfile="${basedir}/AED_Build/temp_modl/jackson-databind-2.2.3.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/logback-classic-1.2.3.jar" destfile="${basedir}/AED_Build/temp_modl/logback-classic-1.2.3.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${basedir}/../../external/lib/logback-core-1.2.3.jar" destfile="${basedir}/AED_Build/temp_modl/logback-core-1.2.3.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />

		<!-- Copy gateway jar -->
		<copy file="${basedir}/AED_Build/bin/${AEDModule.name}_Gateway/dist/aed-gateway.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/AED_Build/bin/${AEDModule.name}_Common/dist/aed-common.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/antlr-runtime-4.5.1.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/commons-lang3-3.1.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/commons-math3-3.6.1.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/ils-common.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/jackson-annotations-2.2.3.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/jackson-core-2.2.3.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/jackson-databind-2.2.3.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/logback-classic-1.2.3.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/logback-core-1.2.3.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/log4j-1.2.16.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<copy file="${basedir}/../../external/lib/user-expression.jar" todir="${basedir}/AED_Build/temp_modl/" />
		<!-- Copy license file and javadoc into the bundle -->
		<copy file="${basedir}/AED_Build/license.html" todir="${basedir}/AED_Build/temp_modl/" />
		<copy todir="${basedir}/AED_Build/temp_modl/doc">
			<fileset dir="${basedir}/AED_Build/doc"/>
		</copy>
		<!-- Echo the version into .version in the bundle and to be saved -->
		<echo message="${AEDModule.name}-${AEDModule.version}" file="${basedir}/AED_Build/temp_modl/.version" append="false"/>
		<echo message="${AEDModule.name}-${AEDModule.version}" file="${basedir}/AED_Build/.version" append="false"/>
		<zip zipfile="${basedir}/AED_Build/modules/${AEDModule.name}-module-unsigned.modl" basedir="${basedir}/AED_Build/temp_modl" />
		<!-- Sign the module jar -->
		<antcall target="SignModule">
			<param name="moduleName" value="${AEDModule.name}-${AEDModule.version}" />
			<param name="modulein"   value="${basedir}/AED_build/modules/${AEDModule.name}-module-unsigned.modl" />
			<param name="moduleout"  value="${basedir}/AED_build/modules/${AEDModule.name}-module-signed.modl" />
		</antcall>
		
		<!-- Cleanup jars created in the external area -->
		<delete file="${common.jar.dir}/${common.jar.name}" />
	</target>

	<!-- Installs AED module in local Ignition gateway. Note that the gateway must be running in developer mode for this to succeed. -->
	<target name="deploy">
		<echo message="Installing ${AEDModule.name} on Ignition Gateway." />
		<postmodule posturl="${local.gateway.url}" modulefile="${basedir}/AED_Build/modules/${AEDModule.name}-module-signed.modl" />
	</target>
</project>