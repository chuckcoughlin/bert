From e5c25aa456515956a444b315e30e79f04de2c33d Mon Sep 17 00:00:00 2001
From: "Daniele E. Domenichelli" <daniele.domenichelli@iit.it>
Date: Tue, 18 Oct 2016 14:12:46 +0200
Subject: [PATCH 19/22] XmlRpc++: Adapt and build base64.{cpp,h}

The original methods were modified to:

  std::string YarpXmlRpc::base64_encode(const std::vector<char>& bytes_to_encode);
  std::vector<char> YarpXmlRpc::base64_decode(const std::string& encoded_string);
---
 extern/xmlrpcpp/xmlrpcpp/src/base64.cpp | 19 ++++++++++-------
 extern/xmlrpcpp/xmlrpcpp/src/base64.h   | 37 +++++++++++++++++++++++++++++++--
 2 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/extern/xmlrpcpp/xmlrpcpp/src/base64.cpp b/extern/xmlrpcpp/xmlrpcpp/src/base64.cpp
index 5cb8591..e6bfe37 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/base64.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/base64.cpp
@@ -38,15 +38,18 @@ static inline bool is_base64(unsigned char c) {
   return (isalnum(c) || (c == '+') || (c == '/'));
 }
 
-std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) {
+
+namespace YarpXmlRpc {
+
+std::string base64_encode(const std::vector<char>& bytes_to_encode) {
   std::string ret;
   int i = 0;
   int j = 0;
   unsigned char char_array_3[3];
   unsigned char char_array_4[4];
 
-  while (in_len--) {
-    char_array_3[i++] = *(bytes_to_encode++);
+  for(std::vector<char>::const_iterator it = bytes_to_encode.begin(); it != bytes_to_encode.end(); ++it) {
+    char_array_3[i++] = *it;
     if (i == 3) {
       char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
       char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
@@ -81,13 +84,13 @@ std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_
 
 }
 
-std::string base64_decode(std::string const& encoded_string) {
+std::vector<char> base64_decode(const std::string& encoded_string) {
   int in_len = encoded_string.size();
   int i = 0;
   int j = 0;
   int in_ = 0;
   unsigned char char_array_4[4], char_array_3[3];
-  std::string ret;
+  std::vector<char> ret;
 
   while (in_len-- && ( encoded_string[in_] != '=') && is_base64(encoded_string[in_])) {
     char_array_4[i++] = encoded_string[in_]; in_++;
@@ -100,7 +103,7 @@ std::string base64_decode(std::string const& encoded_string) {
       char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];
 
       for (i = 0; (i < 3); i++)
-        ret += char_array_3[i];
+        ret.push_back(char_array_3[i]);
       i = 0;
     }
   }
@@ -116,8 +119,10 @@ std::string base64_decode(std::string const& encoded_string) {
     char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
     char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];
 
-    for (j = 0; (j < i - 1); j++) ret += char_array_3[j];
+    for (j = 0; (j < i - 1); j++) ret.push_back(char_array_3[j]);
   }
 
   return ret;
 }
+
+}
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/base64.h b/extern/xmlrpcpp/xmlrpcpp/src/base64.h
index 65d5db8..ede7ddc 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/base64.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/base64.h
@@ -1,4 +1,37 @@
+/*
+   base64.cpp and base64.h
+
+   Copyright (C) 2004-2008 René Nyffenegger
+
+   This source code is provided 'as-is', without any express or implied
+   warranty. In no event will the author be held liable for any damages
+   arising from the use of this software.
+
+   Permission is granted to anyone to use this software for any purpose,
+   including commercial applications, and to alter it and redistribute it
+   freely, subject to the following restrictions:
+
+   1. The origin of this source code must not be misrepresented; you must not
+      claim that you wrote the original source code. If you use this source code
+      in a product, an acknowledgment in the product documentation would be
+      appreciated but is not required.
+
+   2. Altered source versions must be plainly marked as such, and must not be
+      misrepresented as being the original source code.
+
+   3. This notice may not be removed or altered from any source distribution.
+
+   René Nyffenegger rene.nyffenegger@adp-gmbh.ch
+
+*/
+
+
 #include <string>
+#include <vector>
+
+namespace YarpXmlRpc {
+
+std::string base64_encode(const std::vector<char>& bytes_to_encode);
+std::vector<char> base64_decode(const std::string& encoded_string);
 
-std::string base64_encode(unsigned char const* , unsigned int len);
-std::string base64_decode(std::string const& s);
+}
-- 
2.10.2

