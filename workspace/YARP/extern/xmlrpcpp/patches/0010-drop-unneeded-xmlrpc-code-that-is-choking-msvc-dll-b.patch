From 57c407b67df1110c74881f32e4bf8b05e1b1cd91 Mon Sep 17 00:00:00 2001
From: Paul Fitzpatrick <paulfitz@alum.mit.edu>
Date: Wed, 16 May 2012 21:12:05 +0000
Subject: [PATCH 10/22] drop unneeded xmlrpc code that is choking msvc dll
 build

svn path=/trunk/yarp2/; revision=9157
---
 .../xmlrpc_carrier/xmlrpc/XmlRpcClient.cpp         | 108 +-------
 extern/xmlrpcpp/xmlrpcpp/XmlRpcClient.h  |   4 -
 .../xmlrpc_carrier/xmlrpc/XmlRpcDispatch.cpp       | 213 ----------------
 .../xmlrpc_carrier/xmlrpc/XmlRpcDispatch.h         |  91 -------
 .../xmlrpc_carrier/xmlrpc/XmlRpcServer.cpp         |  79 +-----
 extern/xmlrpcpp/xmlrpcpp/XmlRpcServer.h  |   4 +-
 .../xmlrpc/XmlRpcServerConnection.cpp              |  30 +--
 .../xmlrpc_carrier/xmlrpc/XmlRpcSocket.cpp         | 275 ---------------------
 extern/xmlrpcpp/xmlrpcpp/XmlRpcSocket.h  |  72 ------
 .../xmlrpc_carrier/xmlrpc/XmlRpcSource.cpp         |   7 -
 10 files changed, 12 insertions(+), 871 deletions(-)
 delete mode 100644 extern/xmlrpcpp/xmlrpcpp/XmlRpcDispatch.cpp
 delete mode 100644 extern/xmlrpcpp/xmlrpcpp/XmlRpcDispatch.h
 delete mode 100644 extern/xmlrpcpp/xmlrpcpp/XmlRpcSocket.cpp
 delete mode 100644 extern/xmlrpcpp/xmlrpcpp/XmlRpcSocket.h

diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
index f5dc84c..d31ffb5 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
@@ -5,7 +5,6 @@
 
 #include "XmlRpcClient.h"
 
-#include "XmlRpcSocket.h"
 #include "XmlRpc.h"
 
 #include <stdio.h>
@@ -59,8 +58,6 @@ XmlRpcClient::close()
 {
   XmlRpcUtil::log(4, "XmlRpcClient::close: fd %d.", getfd());
   _connectionState = NO_CONNECTION;
-  _disp.exit();
-  _disp.removeSource(this);
   XmlRpcSource::close();
 }
 
@@ -79,36 +76,7 @@ struct ClearFlagOnExit {
 bool 
 XmlRpcClient::execute(const char* method, XmlRpcValue const& params, XmlRpcValue& result)
 {
-  XmlRpcUtil::log(1, "XmlRpcClient::execute: method %s (_connectionState %d).", method, _connectionState);
-
-  // This is not a thread-safe operation, if you want to do multithreading, use separate
-  // clients for each thread. If you want to protect yourself from multiple threads
-  // accessing the same client, replace this code with a real mutex.
-  if (_executing)
-    return false;
-
-  _executing = true;
-  ClearFlagOnExit cf(_executing);
-
-  _sendAttempts = 0;
-  _isFault = false;
-
-  if ( ! setupConnection())
-    return false;
-
-  if ( ! generateRequest(method, params))
-    return false;
-
-  result.clear();
-  double msTime = -1.0;   // Process until exit is called
-  _disp.work(msTime);
-
-  if (_connectionState != IDLE || ! parseResponse(result))
-    return false;
-
-  XmlRpcUtil::log(1, "XmlRpcClient::execute: method %s completed.", method);
-  _response = "";
-  return true;
+  return false;
 }
 
 // XmlRpcSource interface implementation
@@ -116,29 +84,7 @@ XmlRpcClient::execute(const char* method, XmlRpcValue const& params, XmlRpcValue
 unsigned
 XmlRpcClient::handleEvent(unsigned eventType)
 {
-  if (eventType == XmlRpcDispatch::Exception)
-  {
-    if (_connectionState == WRITE_REQUEST && _bytesWritten == 0)
-      XmlRpcUtil::error("Error in XmlRpcClient::handleEvent: could not connect to server (%s).", 
-                       XmlRpcSocket::getErrorMsg().c_str());
-    else
-      XmlRpcUtil::error("Error in XmlRpcClient::handleEvent (state %d): %s.", 
-                        _connectionState, XmlRpcSocket::getErrorMsg().c_str());
-    return 0;
-  }
-
-  if (_connectionState == WRITE_REQUEST)
-    if ( ! writeRequest()) return 0;
-
-  if (_connectionState == READ_HEADER)
-    if ( ! readHeader()) return 0;
-
-  if (_connectionState == READ_RESPONSE)
-    if ( ! readResponse()) return 0;
-
-  // This should probably always ask for Exception events too
-  return (_connectionState == WRITE_REQUEST) 
-        ? XmlRpcDispatch::WritableEvent : XmlRpcDispatch::ReadableEvent;
+  return 0;
 }
 
 
@@ -159,10 +105,6 @@ XmlRpcClient::setupConnection()
   _connectionState = WRITE_REQUEST;
   _bytesWritten = 0;
 
-  // Notify the dispatcher to listen on this source (calls handleEvent when the socket is writable)
-  _disp.removeSource(this);       // Make sure nothing is left over
-  _disp.addSource(this, XmlRpcDispatch::WritableEvent | XmlRpcDispatch::Exception);
-
   return true;
 }
 
@@ -171,32 +113,7 @@ XmlRpcClient::setupConnection()
 bool 
 XmlRpcClient::doConnect()
 {
-  int fd = XmlRpcSocket::socket();
-  if (fd < 0)
-  {
-    XmlRpcUtil::error("Error in XmlRpcClient::doConnect: Could not create socket (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  XmlRpcUtil::log(3, "XmlRpcClient::doConnect: fd %d.", fd);
-  this->setfd(fd);
-
-  // Don't block on connect/reads/writes
-  if ( ! XmlRpcSocket::setNonBlocking(fd))
-  {
-    this->close();
-    XmlRpcUtil::error("Error in XmlRpcClient::doConnect: Could not set socket to non-blocking IO mode (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  if ( ! XmlRpcSocket::connect(fd, _host, _port))
-  {
-    this->close();
-    XmlRpcUtil::error("Error in XmlRpcClient::doConnect: Could not connect to server (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  return true;
+  return false;
 }
 
 // Encode the request to call the specified method with the specified parameters into xml
@@ -262,24 +179,7 @@ XmlRpcClient::generateHeader(std::string const& body)
 bool 
 XmlRpcClient::writeRequest()
 {
-  if (_bytesWritten == 0)
-    XmlRpcUtil::log(5, "XmlRpcClient::writeRequest (attempt %d):\n%s\n", _sendAttempts+1, _request.c_str());
-
-  // Try to write the request
-  if ( ! XmlRpcSocket::nbWrite(this->getfd(), _request, &_bytesWritten)) {
-    XmlRpcUtil::error("Error in XmlRpcClient::writeRequest: write error (%s).",XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-    
-  XmlRpcUtil::log(3, "XmlRpcClient::writeRequest: wrote %d of %d bytes.", _bytesWritten, _request.length());
-
-  // Wait for the result
-  if (_bytesWritten == int(_request.length())) {
-    _header = "";
-    _response = "";
-    _connectionState = READ_HEADER;
-  }
-  return true;
+  return false;
 }
 
 void XmlRpcClient::reset() {
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
index 949c739..6596618 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
@@ -15,7 +15,6 @@
 # include <string>
 #endif
 
-#include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
 
 namespace XmlRpc {
@@ -124,9 +123,6 @@ namespace XmlRpc {
     // Number of bytes expected in the response body (parsed from response header)
     int _contentLength;
 
-    // Event dispatcher
-    XmlRpcDispatch _disp;
-
   };	// class XmlRpcClient
 
 }	// namespace XmlRpc
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.cpp
deleted file mode 100644
index 9fc41cb..0000000
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.cpp
+++ /dev/null
@@ -1,213 +0,0 @@
-
-// Summary for YARP:
-// Copyright: 2002, 2003 Chris Morley
-// CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
-
-#include "XmlRpcDispatch.h"
-#include "XmlRpcSource.h"
-#include "XmlRpcUtil.h"
-
-#include <math.h>
-#include <sys/timeb.h>
-
-#if defined(_WINDOWS)
-# include <winsock2.h>
-
-# define USE_FTIME
-# if defined(_MSC_VER)
-#  define timeb _timeb
-#  define ftime _ftime
-# endif
-#else
-# include <sys/time.h>
-#endif  // _WINDOWS
-
-
-using namespace XmlRpc;
-
-
-XmlRpcDispatch::XmlRpcDispatch()
-{
-  _endTime = -1.0;
-  _doClear = false;
-  _inWork = false;
-}
-
-
-XmlRpcDispatch::~XmlRpcDispatch()
-{
-}
-
-// Monitor this source for the specified events and call its event handler
-// when the event occurs
-void
-XmlRpcDispatch::addSource(XmlRpcSource* source, unsigned mask)
-{
-  _sources.push_back(MonitoredSource(source, mask));
-}
-
-// Stop monitoring this source. Does not close the source.
-void
-XmlRpcDispatch::removeSource(XmlRpcSource* source)
-{
-  for (SourceList::iterator it=_sources.begin(); it!=_sources.end(); ++it)
-    if (it->getSource() == source)
-    {
-      _sources.erase(it);
-      break;
-    }
-}
-
-
-// Modify the types of events to watch for on this source
-void 
-XmlRpcDispatch::setSourceEvents(XmlRpcSource* source, unsigned eventMask)
-{
-  for (SourceList::iterator it=_sources.begin(); it!=_sources.end(); ++it)
-    if (it->getSource() == source)
-    {
-      it->getMask() = eventMask;
-      break;
-    }
-}
-
-
-
-// Watch current set of sources and process events
-void
-XmlRpcDispatch::work(double timeout)
-{
-  // Compute end time
-  _endTime = (timeout < 0.0) ? -1.0 : (getTime() + timeout);
-  _doClear = false;
-  _inWork = true;
-
-  // Only work while there is something to monitor
-  while (_sources.size() > 0) {
-
-    // Construct the sets of descriptors we are interested in
-    fd_set inFd, outFd, excFd;
-	  FD_ZERO(&inFd);
-	  FD_ZERO(&outFd);
-	  FD_ZERO(&excFd);
-
-    int maxFd = -1;     // Not used on windows
-    SourceList::iterator it;
-    for (it=_sources.begin(); it!=_sources.end(); ++it) {
-      int fd = it->getSource()->getfd();
-      if (it->getMask() & ReadableEvent) FD_SET(fd, &inFd);
-      if (it->getMask() & WritableEvent) FD_SET(fd, &outFd);
-      if (it->getMask() & Exception)     FD_SET(fd, &excFd);
-      if (it->getMask() && fd > maxFd)   maxFd = fd;
-    }
-
-    // Check for events
-    int nEvents;
-    if (timeout < 0.0)
-      nEvents = select(maxFd+1, &inFd, &outFd, &excFd, NULL);
-    else 
-    {
-      struct timeval tv;
-      tv.tv_sec = (int)floor(timeout);
-      tv.tv_usec = ((int)floor(1000000.0 * (timeout-floor(timeout)))) % 1000000;
-      nEvents = select(maxFd+1, &inFd, &outFd, &excFd, &tv);
-    }
-
-    if (nEvents < 0)
-    {
-      XmlRpcUtil::error("Error in XmlRpcDispatch::work: error in select (%d).", nEvents);
-      _inWork = false;
-      return;
-    }
-
-    // Process events
-    for (it=_sources.begin(); it != _sources.end(); )
-    {
-      SourceList::iterator thisIt = it++;
-      XmlRpcSource* src = thisIt->getSource();
-      int fd = src->getfd();
-      unsigned newMask = (unsigned) -1;
-      if (fd <= maxFd) {
-        // If you select on multiple event types this could be ambiguous
-        if (FD_ISSET(fd, &inFd))
-          newMask &= src->handleEvent(ReadableEvent);
-        if (FD_ISSET(fd, &outFd))
-          newMask &= src->handleEvent(WritableEvent);
-        if (FD_ISSET(fd, &excFd))
-          newMask &= src->handleEvent(Exception);
-
-        if ( ! newMask) {
-          _sources.erase(thisIt);  // Stop monitoring this one
-          if ( ! src->getKeepOpen())
-            src->close();
-        } else if (newMask != (unsigned) -1) {
-          thisIt->getMask() = newMask;
-        }
-      }
-    }
-
-    // Check whether to clear all sources
-    if (_doClear)
-    {
-      SourceList closeList = _sources;
-      _sources.clear();
-      for (SourceList::iterator it=closeList.begin(); it!=closeList.end(); ++it) {
-	XmlRpcSource *src = it->getSource();
-        src->close();
-      }
-
-      _doClear = false;
-    }
-
-    // Check whether end time has passed
-    if (0 <= _endTime && getTime() > _endTime)
-      break;
-  }
-
-  _inWork = false;
-}
-
-
-// Exit from work routine. Presumably this will be called from
-// one of the source event handlers.
-void
-XmlRpcDispatch::exit()
-{
-  _endTime = 0.0;   // Return from work asap
-}
-
-// Clear all sources from the monitored sources list
-void
-XmlRpcDispatch::clear()
-{
-  if (_inWork)
-    _doClear = true;  // Finish reporting current events before clearing
-  else
-  {
-    SourceList closeList = _sources;
-    _sources.clear();
-    for (SourceList::iterator it=closeList.begin(); it!=closeList.end(); ++it)
-      it->getSource()->close();
-  }
-}
-
-
-double
-XmlRpcDispatch::getTime()
-{
-#ifdef USE_FTIME
-  struct timeb	tbuff;
-
-  ftime(&tbuff);
-  return ((double) tbuff.time + ((double)tbuff.millitm / 1000.0) +
-	  ((double) tbuff.timezone * 60));
-#else
-  struct timeval	tv;
-  struct timezone	tz;
-
-  gettimeofday(&tv, &tz);
-  return (tv.tv_sec + tv.tv_usec / 1000000.0);
-#endif /* USE_FTIME */
-}
-
-
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.h
deleted file mode 100644
index 0f6448a..0000000
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcDispatch.h
+++ /dev/null
@@ -1,91 +0,0 @@
-
-#ifndef _XMLRPCDISPATCH_H_
-#define _XMLRPCDISPATCH_H_
-//
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
-//
-// Summary for YARP:
-// Copyright: 2002, 2003 Chris Morley
-// CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
-#if defined(_MSC_VER)
-# pragma warning(disable:4786)    // identifier was truncated in debug info
-#endif
-
-#ifndef MAKEDEPEND
-# include <list>
-#endif
-
-namespace XmlRpc {
-
-  // An RPC source represents a file descriptor to monitor
-  class XmlRpcSource;
-
-  //! An object which monitors file descriptors for events and performs
-  //! callbacks when interesting events happen.
-  class XmlRpcDispatch {
-  public:
-    //! Constructor
-    XmlRpcDispatch();
-    ~XmlRpcDispatch();
-
-    //! Values indicating the type of events a source is interested in
-    enum EventType {
-      ReadableEvent = 1,    //!< data available to read
-      WritableEvent = 2,    //!< connected/data can be written without blocking
-      Exception     = 4     //!< uh oh
-    };
-    
-    //! Monitor this source for the event types specified by the event mask
-    //! and call its event handler when any of the events occur.
-    //!  @param source The source to monitor
-    //!  @param eventMask Which event types to watch for. \see EventType
-    void addSource(XmlRpcSource* source, unsigned eventMask);
-
-    //! Stop monitoring this source.
-    //!  @param source The source to stop monitoring
-    void removeSource(XmlRpcSource* source);
-
-    //! Modify the types of events to watch for on this source
-    void setSourceEvents(XmlRpcSource* source, unsigned eventMask);
-
-
-    //! Watch current set of sources and process events for the specified
-    //! duration (in ms, -1 implies wait forever, or until exit is called)
-    void work(double msTime);
-
-    //! Exit from work routine
-    void exit();
-
-    //! Clear all sources from the monitored sources list. Sources are closed.
-    void clear();
-
-  protected:
-
-    // helper
-    double getTime();
-
-    // A source to monitor and what to monitor it for
-    struct MonitoredSource {
-      MonitoredSource(XmlRpcSource* src, unsigned mask) : _src(src), _mask(mask) {}
-      XmlRpcSource* getSource() const { return _src; }
-      unsigned& getMask() { return _mask; }
-      XmlRpcSource* _src;
-      unsigned _mask;
-    };
-
-    // A list of sources to monitor
-    typedef std::list< MonitoredSource > SourceList; 
-
-    // Sources being monitored
-    SourceList _sources;
-
-    // When work should stop (-1 implies wait forever, or until exit is called)
-    double _endTime;
-
-    bool _doClear;
-    bool _inWork;
-
-  };
-} // namespace XmlRpc
-
-#endif  // _XMLRPCDISPATCH_H_
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
index b3351e5..bd4f582 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.cpp
@@ -5,7 +5,6 @@
 #include "XmlRpcServer.h"
 #include "XmlRpcServerConnection.h"
 #include "XmlRpcServerMethod.h"
-#include "XmlRpcSocket.h"
 #include "XmlRpcUtil.h"
 #include "XmlRpcException.h"
 
@@ -72,53 +71,7 @@ XmlRpcServer::findMethod(const std::string& name) const
 bool 
 XmlRpcServer::bindAndListen(int port, int backlog /*= 5*/)
 {
-  int fd = XmlRpcSocket::socket();
-  if (fd < 0)
-  {
-    XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not create socket (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  this->setfd(fd);
-
-  // Don't block on reads/writes
-  if ( ! XmlRpcSocket::setNonBlocking(fd))
-  {
-    this->close();
-    XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not set socket to non-blocking input mode (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  // Allow this port to be re-bound immediately so server re-starts are not delayed
-  if ( ! XmlRpcSocket::setReuseAddr(fd))
-  {
-    this->close();
-    XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not set SO_REUSEADDR socket option (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  // Bind to the specified port on the default interface
-  if ( ! XmlRpcSocket::bind(fd, port))
-  {
-    this->close();
-    XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not bind to specified port (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  // Set in listening mode
-  if ( ! XmlRpcSocket::listen(fd, backlog))
-  {
-    this->close();
-    XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not set socket in listening mode (%s).", XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-
-  XmlRpcUtil::log(2, "XmlRpcServer::bindAndListen: server listening on port %d fd %d", port, fd);
-
-  // Notify the dispatcher to listen on this source when we are in work()
-  _disp.addSource(this, XmlRpcDispatch::ReadableEvent);
-
-  return true;
+  return false;
 }
 
 
@@ -126,8 +79,7 @@ XmlRpcServer::bindAndListen(int port, int backlog /*= 5*/)
 void 
 XmlRpcServer::work(double msTime)
 {
-  XmlRpcUtil::log(2, "XmlRpcServer::work: waiting for a connection");
-  _disp.work(msTime);
+  return;
 }
 
 
@@ -137,8 +89,7 @@ XmlRpcServer::work(double msTime)
 unsigned
 XmlRpcServer::handleEvent(unsigned mask)
 {
-  acceptConnection();
-  return XmlRpcDispatch::ReadableEvent;		// Continue to monitor this fd
+  return -1;
 }
 
 
@@ -147,23 +98,6 @@ XmlRpcServer::handleEvent(unsigned mask)
 void
 XmlRpcServer::acceptConnection()
 {
-  int s = XmlRpcSocket::accept(this->getfd());
-  XmlRpcUtil::log(2, "XmlRpcServer::acceptConnection: socket %d", s);
-  if (s < 0)
-  {
-    //this->close();
-    XmlRpcUtil::error("XmlRpcServer::acceptConnection: Could not accept connection (%s).", XmlRpcSocket::getErrorMsg().c_str());
-  }
-  else if ( ! XmlRpcSocket::setNonBlocking(s))
-  {
-    XmlRpcSocket::close(s);
-    XmlRpcUtil::error("XmlRpcServer::acceptConnection: Could not set socket to non-blocking input mode (%s).", XmlRpcSocket::getErrorMsg().c_str());
-  }
-  else  // Notify the dispatcher to listen for input on this source when we are in work()
-  {
-    XmlRpcUtil::log(2, "XmlRpcServer::acceptConnection: creating a connection");
-    _disp.addSource(this->createConnection(s), XmlRpcDispatch::ReadableEvent);
-  }
 }
 
 
@@ -171,15 +105,13 @@ XmlRpcServer::acceptConnection()
 XmlRpcServerConnection*
 XmlRpcServer::createConnection(int s)
 {
-  // Specify that the connection object be deleted when it is closed
-  return new XmlRpcServerConnection(s, this, true);
+  return NULL;
 }
 
 
 void 
 XmlRpcServer::removeConnection(XmlRpcServerConnection* sc)
 {
-  _disp.removeSource(sc);
 }
 
 
@@ -187,7 +119,6 @@ XmlRpcServer::removeConnection(XmlRpcServerConnection* sc)
 void 
 XmlRpcServer::exit()
 {
-  _disp.exit();
 }
 
 
@@ -195,8 +126,6 @@ XmlRpcServer::exit()
 void 
 XmlRpcServer::shutdown()
 {
-  // This closes and destroys all connections as well as closing this socket
-  _disp.clear();
 }
 
 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
index 566bf75..16bb4a4 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServer.h
@@ -16,7 +16,7 @@
 # include <string>
 #endif
 
-#include "XmlRpcDispatch.h"
+//#include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
 
 namespace XmlRpc {
@@ -91,7 +91,7 @@ namespace XmlRpc {
     bool _introspectionEnabled;
 
     // Event dispatcher
-    XmlRpcDispatch _disp;
+    //XmlRpcDispatch _disp;
 
     // Collection of methods. This could be a set keyed on method name if we wanted...
     typedef std::map< std::string, XmlRpcServerMethod* > MethodMap;
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
index 13cad73..73f3681 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
@@ -4,7 +4,6 @@
 
 #include "XmlRpcServerConnection.h"
 
-#include "XmlRpcSocket.h"
 #include "XmlRpc.h"
 #ifndef MAKEDEPEND
 # include <stdio.h>
@@ -65,8 +64,7 @@ XmlRpcServerConnection::handleEvent(unsigned /*eventType*/)
   if (_connectionState == WRITE_RESPONSE)
     if ( ! writeResponse()) return 0;
 
-  return (_connectionState == WRITE_RESPONSE) 
-        ? XmlRpcDispatch::WritableEvent : XmlRpcDispatch::ReadableEvent;
+  return 0;
 }
 
 void XmlRpcServerConnection::reset() {
@@ -201,31 +199,7 @@ XmlRpcServerConnection::readRequest(const std::string& txt)
 bool
 XmlRpcServerConnection::writeResponse()
 {
-  if (_response.length() == 0) {
-    executeRequest();
-    _bytesWritten = 0;
-    if (_response.length() == 0) {
-      XmlRpcUtil::error("XmlRpcServerConnection::writeResponse: empty response.");
-      return false;
-    }
-  }
-
-  // Try to write the response
-  if ( ! XmlRpcSocket::nbWrite(this->getfd(), _response, &_bytesWritten)) {
-    XmlRpcUtil::error("XmlRpcServerConnection::writeResponse: write error (%s).",XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
-  XmlRpcUtil::log(3, "XmlRpcServerConnection::writeResponse: wrote %d of %d bytes.", _bytesWritten, _response.length());
-
-  // Prepare to read the next request
-  if (_bytesWritten == int(_response.length())) {
-    _header = "";
-    _request = "";
-    _response = "";
-    _connectionState = READ_HEADER;
-  }
-
-  return _keepAlive;    // Continue monitoring this source if true
+  return false;
 }
 
 // Run the method, generate _response string
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp
deleted file mode 100644
index 3b7b3c6..0000000
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp
+++ /dev/null
@@ -1,275 +0,0 @@
-// Summary for YARP:
-// Copyright: 2002, 2003 Chris Morley
-// CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
-
-#include "XmlRpcSocket.h"
-#include "XmlRpcUtil.h"
-
-#ifndef MAKEDEPEND
-
-#if defined(_WINDOWS)
-# include <stdio.h>
-# include <winsock2.h>
-# ifdef _MSC_VER
-#  pragma lib(WS2_32.lib)
-# endif
-
-# ifndef EINPROGRESS
-#   define EINPROGRESS	WSAEINPROGRESS
-# endif
-# ifndef EWOULDBLOCK
-#   define EWOULDBLOCK	WSAEWOULDBLOCK
-# endif
-# ifndef ETIMEDOUT
-#   define ETIMEDOUT	    WSAETIMEDOUT
-# endif
-#else
-extern "C" {
-# include <unistd.h>
-# include <stdio.h>
-# include <sys/types.h>
-# include <sys/socket.h>
-# include <netinet/in.h>
-# include <netdb.h>
-# include <errno.h>
-# include <fcntl.h>
-}
-#endif  // _WINDOWS
-
-#include <stdlib.h>
-#include <memory.h>
-
-#endif // MAKEDEPEND
-
-
-using namespace XmlRpc;
-
-
-
-#if defined(_WINDOWS)
-  
-static void initWinSock()
-{
-  static bool wsInit = false;
-  if (! wsInit)
-  {
-    WORD wVersionRequested = MAKEWORD( 2, 0 );
-    WSADATA wsaData;
-    WSAStartup(wVersionRequested, &wsaData);
-    wsInit = true;
-  }
-}
-
-#else
-
-#define initWinSock()
-
-#endif // _WINDOWS
-
-
-// These errors are not considered fatal for an IO operation; the operation will be re-tried.
-static inline bool
-nonFatalError()
-{
-  //int err = XmlRpcSocket::getError();
-  //return (err == EINPROGRESS || err == EAGAIN || err == EWOULDBLOCK || err == EINTR);
-	return false; // do not need this for YARP, and causes problems on windows
-}
-
-
-
-int
-XmlRpcSocket::socket()
-{
-  initWinSock();
-  return (int) ::socket(AF_INET, SOCK_STREAM, 0);
-}
-
-
-void
-XmlRpcSocket::close(int fd)
-{
-  XmlRpcUtil::log(4, "XmlRpcSocket::close: fd %d.", fd);
-#if defined(_WINDOWS)
-  closesocket(fd);
-#else
-  ::close(fd);
-#endif // _WINDOWS
-}
-
-
-
-
-bool
-XmlRpcSocket::setNonBlocking(int fd)
-{
-#if defined(_WINDOWS)
-  unsigned long flag = 1;
-  return (ioctlsocket((SOCKET)fd, FIONBIO, &flag) == 0);
-#else
-  return (fcntl(fd, F_SETFL, O_NONBLOCK) == 0);
-#endif // _WINDOWS
-}
-
-
-bool
-XmlRpcSocket::setReuseAddr(int fd)
-{
-  // Allow this port to be re-bound immediately so server re-starts are not delayed
-  int sflag = 1;
-  return (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const char *)&sflag, sizeof(sflag)) == 0);
-}
-
-
-// Bind to a specified port
-bool 
-XmlRpcSocket::bind(int fd, int port)
-{
-  struct sockaddr_in saddr;
-  memset(&saddr, 0, sizeof(saddr));
-  saddr.sin_family = AF_INET;
-  saddr.sin_addr.s_addr = htonl(INADDR_ANY);
-  saddr.sin_port = htons((u_short) port);
-  return (::bind(fd, (struct sockaddr *)&saddr, sizeof(saddr)) == 0);
-}
-
-
-// Set socket in listen mode
-bool 
-XmlRpcSocket::listen(int fd, int backlog)
-{
-  return (::listen(fd, backlog) == 0);
-}
-
-
-int
-XmlRpcSocket::accept(int fd)
-{
-  struct sockaddr_in addr;
-#if defined(_WINDOWS)
-  int
-#else
-  socklen_t
-#endif
-    addrlen = sizeof(addr);
-
-  return (int) ::accept(fd, (struct sockaddr*)&addr, &addrlen);
-}
-
-
-    
-// Connect a socket to a server (from a client)
-bool
-XmlRpcSocket::connect(int fd, std::string& host, int port)
-{
-  struct sockaddr_in saddr;
-  memset(&saddr, 0, sizeof(saddr));
-  saddr.sin_family = AF_INET;
-
-  struct hostent *hp = gethostbyname(host.c_str());
-  if (hp == 0) return false;
-
-  saddr.sin_family = hp->h_addrtype;
-  memcpy(&saddr.sin_addr, hp->h_addr, hp->h_length);
-  saddr.sin_port = htons((u_short) port);
-
-  // For asynch operation, this will return EWOULDBLOCK (windows) or
-  // EINPROGRESS (linux) and we just need to wait for the socket to be writable...
-  int result = ::connect(fd, (struct sockaddr *)&saddr, sizeof(saddr));
-  return result == 0 || nonFatalError();
-}
-
-
-
-// Read available text from the specified socket. Returns false on error.
-bool 
-XmlRpcSocket::nbRead(int fd, std::string& s, bool *eof)
-{
-  const int READ_SIZE = 4096;   // Number of bytes to attempt to read at a time
-  char readBuf[READ_SIZE];
-
-  bool wouldBlock = false;
-  *eof = false;
-
-  while ( ! wouldBlock && ! *eof) {
-#if defined(_WINDOWS)
-    int n = recv(fd, readBuf, READ_SIZE-1, 0);
-#else
-    int n = read(fd, readBuf, READ_SIZE-1);
-#endif
-    XmlRpcUtil::log(5, "XmlRpcSocket::nbRead: read/recv returned %d.", n);
-
-    if (n > 0) {
-      readBuf[n] = 0;
-      s.append(readBuf, n);
-    } else if (n == 0) {
-      *eof = true;
-    } else if (nonFatalError()) {
-      wouldBlock = true;
-    } else {
-      return false;   // Error
-    }
-  }
-  return true;
-}
-
-
-// Write text to the specified socket. Returns false on error.
-bool 
-XmlRpcSocket::nbWrite(int fd, std::string& s, int *bytesSoFar)
-{
-  int nToWrite = int(s.length()) - *bytesSoFar;
-  char *sp = const_cast<char*>(s.c_str()) + *bytesSoFar;
-  bool wouldBlock = false;
-
-  while ( nToWrite > 0 && ! wouldBlock ) {
-#if defined(_WINDOWS)
-    int n = send(fd, sp, nToWrite, 0);
-#else
-    int n = write(fd, sp, nToWrite);
-#endif
-    XmlRpcUtil::log(5, "XmlRpcSocket::nbWrite: send/write returned %d.", n);
-
-    if (n > 0) {
-      sp += n;
-      *bytesSoFar += n;
-      nToWrite -= n;
-    } else if (nonFatalError()) {
-      wouldBlock = true;
-    } else {
-      return false;   // Error
-    }
-  }
-  return true;
-}
-
-
-// Returns last errno
-int 
-XmlRpcSocket::getError()
-{
-#if defined(_WINDOWS)
-  return WSAGetLastError();
-#else
-  return errno;
-#endif
-}
-
-
-// Returns message corresponding to last errno
-std::string 
-XmlRpcSocket::getErrorMsg()
-{
-  return getErrorMsg(getError());
-}
-
-// Returns message corresponding to errno... well, it should anyway
-std::string 
-XmlRpcSocket::getErrorMsg(int error)
-{
-  char err[60];
-  snprintf(err,sizeof(err),"error %d", error);
-  return std::string(err);
-}
-
-
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.h
deleted file mode 100644
index b549f3b..0000000
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.h
+++ /dev/null
@@ -1,72 +0,0 @@
-#ifndef _XMLRPCSOCKET_H_
-#define _XMLRPCSOCKET_H_
-//
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
-//
-// Summary for YARP:
-// Copyright: 2002, 2003 Chris Morley
-// CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
-#if defined(_MSC_VER)
-# pragma warning(disable:4786)    // identifier was truncated in debug info
-#endif
-
-#ifndef MAKEDEPEND
-# include <string>
-#endif
-
-namespace XmlRpc {
-
-  //! A platform-independent socket API.
-  class XmlRpcSocket {
-  public:
-
-    //! Creates a stream (TCP) socket. Returns -1 on failure.
-    static int socket();
-
-    //! Closes a socket.
-    static void close(int socket);
-
-
-    //! Sets a stream (TCP) socket to perform non-blocking IO. Returns false on failure.
-    static bool setNonBlocking(int socket);
-
-    //! Read text from the specified socket. Returns false on error.
-    static bool nbRead(int socket, std::string& s, bool *eof);
-
-    //! Write text to the specified socket. Returns false on error.
-    static bool nbWrite(int socket, std::string& s, int *bytesSoFar);
-
-
-    // The next four methods are appropriate for servers.
-
-    //! Allow the port the specified socket is bound to to be re-bound immediately so 
-    //! server re-starts are not delayed. Returns false on failure.
-    static bool setReuseAddr(int socket);
-
-    //! Bind to a specified port
-    static bool bind(int socket, int port);
-
-    //! Set socket in listen mode
-    static bool listen(int socket, int backlog);
-
-    //! Accept a client connection request
-    static int accept(int socket);
-
-
-    //! Connect a socket to a server (from a client)
-    static bool connect(int socket, std::string& host, int port);
-
-
-    //! Returns last errno
-    static int getError();
-
-    //! Returns message corresponding to last error
-    static std::string getErrorMsg();
-
-    //! Returns message corresponding to error
-    static std::string getErrorMsg(int error);
-  };
-
-} // namespace XmlRpc
-
-#endif
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
index 67b69ba..52da4f3 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSource.cpp
@@ -3,7 +3,6 @@
 // CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 
 #include "XmlRpcSource.h"
-#include "XmlRpcSocket.h"
 #include "XmlRpcUtil.h"
 
 namespace XmlRpc {
@@ -22,12 +21,6 @@ namespace XmlRpc {
   void
   XmlRpcSource::close()
   {
-    if (_fd != -1) {
-      XmlRpcUtil::log(2,"XmlRpcSource::close: closing socket %d.", _fd);
-      XmlRpcSocket::close(_fd);
-      XmlRpcUtil::log(2,"XmlRpcSource::close: done closing socket %d.", _fd);
-      _fd = -1;
-    }
     if (_deleteOnClose) {
       XmlRpcUtil::log(2,"XmlRpcSource::close: deleting this");
       _deleteOnClose = false;
-- 
2.9.3

