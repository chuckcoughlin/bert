From 19a3ac4fbd725719a6dae0ee87c9536d388d427a Mon Sep 17 00:00:00 2001
From: "Paul Fitzpatrick" <paulfitz@alum.mit.edu>
Date: Fri May 28 03:23:50 2010 +0000
Subject: [PATCH 02/22] first pass at an xml/rpc carrier

---
 .../xmlrpc_carrier/xmlrpc/XmlRpcClient.cpp         | 64 +++++++++++++---------
 extern/xmlrpcpp/xmlrpcpp/XmlRpcClient.h  | 15 +++--
 .../xmlrpc/XmlRpcServerConnection.cpp              | 55 +++++++++++++------
 .../xmlrpc_carrier/xmlrpc/XmlRpcServerConnection.h | 21 ++++---
 .../xmlrpc_carrier/xmlrpc/XmlRpcSocket.cpp         |  3 +
 extern/xmlrpcpp/xmlrpcpp/XmlRpcValue.h   |  1 +
 6 files changed, 107 insertions(+), 52 deletions(-)

diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
index e706d0a..f37f417 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.cpp
@@ -6,6 +6,7 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 
 
 using namespace XmlRpc;
@@ -277,29 +278,37 @@ XmlRpcClient::writeRequest()
   return true;
 }
 
+void XmlRpcClient::reset() {
+  _header = "";
+  _response = "";
+  _eof = false;
+  _connectionState = READ_HEADER;
+}
+
+bool XmlRpcClient::read(const std::string& txt) {
+  std::string got = txt;
+  if (_connectionState==READ_HEADER) {
+    readHeader(got);
+    got = "";
+  }
+  if (_connectionState==READ_RESPONSE) {
+    readResponse(got);
+  }
+  return (_connectionState == IDLE);
+}
 
 // Read the header from the response
 bool 
 XmlRpcClient::readHeader()
 {
-  // Read available data
-  if ( ! XmlRpcSocket::nbRead(this->getfd(), _header, &_eof) ||
-       (_eof && _header.length() == 0)) {
-
-    // If we haven't read any data yet and this is a keep-alive connection, the server may
-    // have timed out, so we try one more time.
-    if (getKeepOpen() && _header.length() == 0 && _sendAttempts++ == 0) {
-      XmlRpcUtil::log(4, "XmlRpcClient::readHeader: re-trying connection");
-      XmlRpcSource::close();
-      _connectionState = NO_CONNECTION;
-      _eof = false;
-      return setupConnection();
-    }
+  return false;
+}
 
-    XmlRpcUtil::error("Error in XmlRpcClient::readHeader: error while reading header (%s) on fd %d.",
-                      XmlRpcSocket::getErrorMsg().c_str(), getfd());
-    return false;
-  }
+// Read the header from the response
+bool
+XmlRpcClient::readHeader(const std::string& txt) {
+  _header += txt;
+  _eof = false;
 
   XmlRpcUtil::log(4, "XmlRpcClient::readHeader: client has read %d bytes", _header.length());
 
@@ -349,16 +358,21 @@ XmlRpcClient::readHeader()
   return true;    // Continue monitoring this source
 }
 
+
     
 bool 
-XmlRpcClient::readResponse()
+XmlRpcClient::readResponse() {
+  return false;
+}
+
+bool
+XmlRpcClient::readResponse(const std::string& txt)
 {
+  _eof = false;
+
   // If we dont have the entire response yet, read available data
   if (int(_response.length()) < _contentLength) {
-    if ( ! XmlRpcSocket::nbRead(this->getfd(), _response, &_eof)) {
-      XmlRpcUtil::error("Error in XmlRpcClient::readResponse: read error (%s).",XmlRpcSocket::getErrorMsg().c_str());
-      return false;
-    }
+    _response += txt;
 
     // If we haven't gotten the entire _response yet, return (keep reading)
     if (int(_response.length()) < _contentLength) {
@@ -392,9 +406,9 @@ XmlRpcClient::parseResponse(XmlRpcValue& result)
   }
 
   // Expect either <params><param>... or <fault>...
-  if ((XmlRpcUtil::nextTagIs(PARAMS_TAG,_response,&offset) &&
-       XmlRpcUtil::nextTagIs(PARAM_TAG,_response,&offset)) ||
-      XmlRpcUtil::nextTagIs(FAULT_TAG,_response,&offset) && (_isFault = true))
+  if (((XmlRpcUtil::nextTagIs(PARAMS_TAG,_response,&offset) &&
+	XmlRpcUtil::nextTagIs(PARAM_TAG,_response,&offset))) ||
+      (XmlRpcUtil::nextTagIs(FAULT_TAG,_response,&offset) && (_isFault = true)))
   {
     if ( ! result.fromXml(_response, &offset)) {
       XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response value. Response:\n%s", _response.c_str());
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
index c5e5301..bcdcc32 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcClient.h
@@ -70,17 +70,24 @@ namespace XmlRpc {
     //!  @see XmlRpcDispatch::EventType
     virtual unsigned handleEvent(unsigned eventType);
 
+    virtual bool generateRequest(const char* method, XmlRpcValue const& params);
+    std::string getRequest() { return _request; }
+
+    virtual void reset();
+    virtual bool read(const std::string& txt);
+    virtual bool readHeader(const std::string& txt);
+    virtual bool readResponse(const std::string& txt);
+    virtual bool parseResponse(XmlRpcValue& result);
+
   protected:
     // Execution processing helpers
     virtual bool doConnect();
     virtual bool setupConnection();
+    virtual bool readHeader();
+    virtual bool readResponse();
 
-    virtual bool generateRequest(const char* method, XmlRpcValue const& params);
     virtual std::string generateHeader(std::string const& body);
     virtual bool writeRequest();
-    virtual bool readHeader();
-    virtual bool readResponse();
-    virtual bool parseResponse(XmlRpcValue& result);
 
     // Possible IO states for the connection
     enum ClientConnectionState { NO_CONNECTION, CONNECTING, WRITE_REQUEST, READ_HEADER, READ_RESPONSE, IDLE };
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
index b9d6def..82d3bfd 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.cpp
@@ -6,6 +6,7 @@
 #ifndef MAKEDEPEND
 # include <stdio.h>
 # include <stdlib.h>
+# include <string.h>
 #endif
 
 using namespace XmlRpc;
@@ -40,7 +41,9 @@ XmlRpcServerConnection::XmlRpcServerConnection(int fd, XmlRpcServer* server, boo
 XmlRpcServerConnection::~XmlRpcServerConnection()
 {
   XmlRpcUtil::log(4,"XmlRpcServerConnection dtor.");
-  _server->removeConnection(this);
+  if (_server!=NULL) {
+    _server->removeConnection(this);
+  }
 }
 
 
@@ -63,18 +66,36 @@ XmlRpcServerConnection::handleEvent(unsigned /*eventType*/)
         ? XmlRpcDispatch::WritableEvent : XmlRpcDispatch::ReadableEvent;
 }
 
+void XmlRpcServerConnection::reset() {
+  _header = "";
+  _response = "";
+  _connectionState = READ_HEADER;
+}
+
+bool XmlRpcServerConnection::read(const std::string& txt) {
+  std::string got = txt;
+  if (_connectionState==READ_HEADER) {
+    readHeader(got);
+    got = "";
+  }
+  if (_connectionState==READ_REQUEST) {
+    readRequest(got);
+  }
+  return (_connectionState == WRITE_RESPONSE);
+}
+
 
 bool
-XmlRpcServerConnection::readHeader()
-{
+XmlRpcServerConnection::readHeader() {
+  return false;
+}
+
+
+bool
+XmlRpcServerConnection::readHeader(const std::string& txt) {
   // Read available data
-  bool eof;
-  if ( ! XmlRpcSocket::nbRead(this->getfd(), _header, &eof)) {
-    // Its only an error if we already have read some data
-    if (_header.length() > 0)
-      XmlRpcUtil::error("XmlRpcServerConnection::readHeader: error while reading header (%s).",XmlRpcSocket::getErrorMsg().c_str());
-    return false;
-  }
+  bool eof = false;
+  _header += txt;
 
   XmlRpcUtil::log(4, "XmlRpcServerConnection::readHeader: read %d bytes.", _header.length());
   char *hp = (char*)_header.c_str();  // Start of header
@@ -142,15 +163,17 @@ XmlRpcServerConnection::readHeader()
 }
 
 bool
-XmlRpcServerConnection::readRequest()
+XmlRpcServerConnection::readRequest() {
+  return false;
+}
+
+bool
+XmlRpcServerConnection::readRequest(const std::string& txt) 
 {
   // If we dont have the entire request yet, read available data
   if (int(_request.length()) < _contentLength) {
-    bool eof;
-    if ( ! XmlRpcSocket::nbRead(this->getfd(), _request, &eof)) {
-      XmlRpcUtil::error("XmlRpcServerConnection::readRequest: read error (%s).",XmlRpcSocket::getErrorMsg().c_str());
-      return false;
-    }
+    bool eof = false;
+    _request += txt;
 
     // If we haven't gotten the entire request yet, return (keep reading)
     if (int(_request.length()) < _contentLength) {
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
index 9efbbaf..23d8f43 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcServerConnection.h
@@ -48,26 +48,33 @@ namespace XmlRpc {
     //!   @param eventType Type of IO event that occurred. @see XmlRpcDispatch::EventType.
     virtual unsigned handleEvent(unsigned eventType);
 
-  protected:
-
     bool readHeader();
     bool readRequest();
+
+    void reset();
+    bool read(const std::string& txt);
+    bool readHeader(const std::string& txt);
+    bool readRequest(const std::string& txt);
+    // Parse the methodName and parameters from the request.
+    std::string parseRequest(XmlRpcValue& params);
+
+    // Construct a response from the result XML.
+    void generateResponse(std::string const& resultXml);
+    std::string getResponse() { return _response; }
+
+  protected:
+
     bool writeResponse();
 
     // Parses the request, runs the method, generates the response xml.
     virtual void executeRequest();
 
-    // Parse the methodName and parameters from the request.
-    std::string parseRequest(XmlRpcValue& params);
-
     // Execute a named method with the specified params.
     bool executeMethod(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
 
     // Execute multiple calls and return the results in an array.
     bool executeMulticall(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
 
-    // Construct a response from the result XML.
-    void generateResponse(std::string const& resultXml);
     void generateFaultResponse(std::string const& msg, int errorCode = -1);
     std::string generateHeader(std::string const& body);
 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp
index 56b8d52..2aa21d4 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcSocket.cpp
@@ -25,6 +25,9 @@ extern "C" {
 }
 #endif  // _WINDOWS
 
+#include <stdlib.h>
+#include <memory.h>
+
 #endif // MAKEDEPEND
 
 
diff --git a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
index 7535d4a..4726aa7 100644
--- a/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
+++ b/extern/xmlrpcpp/xmlrpcpp/src/XmlRpcValue.h
@@ -90,6 +90,7 @@ namespace XmlRpc {
     operator std::string&()   { assertTypeOrInvalid(TypeString); return *_value.asString; }
     operator BinaryData&()    { assertTypeOrInvalid(TypeBase64); return *_value.asBinary; }
     operator struct tm&()     { assertTypeOrInvalid(TypeDateTime); return *_value.asTime; }
+    operator ValueStruct&()     { assertStruct(); return *_value.asStruct; }
 
     XmlRpcValue const& operator[](int i) const { assertArray(i+1); return _value.asArray->at(i); }
     XmlRpcValue& operator[](int i)             { assertArray(i+1); return _value.asArray->at(i); }
-- 
2.9.3

