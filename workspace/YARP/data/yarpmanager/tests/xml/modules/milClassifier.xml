<module>
    <!-- module's name should match its executable file's name. -->
    <name>milClassifier</name>
    <description>Wish I knew :) </description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="Name of the module" default="milClassifier"> name</param>
        <param desc="Sub-path from \c $ICUB_ROOT/app to the configuration file" default="milClassifier/conf"> context </param>
        <param desc="Configuration file" default="config.ini"> from </param>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
      <author email="carlo.ciliberto@iit.it"> Carlo Ciliberto </author>
    </authors>

    <!-- <data> can have multiple <input> or <output> tags. -->
    <data>

        <input>
            <type>Image</type>
            <port carrier="udp">/milClassifier/img:i</port>
            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>no</required>
            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>Receives the image.</description>
        </input>

        <input>
            <type>Rpc</type>
            <port carrier="tcp">/milClassifier/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>Receives commands from user (trai clas lock unlo forg load deta).</description>
        </input>

        <!-- output datas if available -->
        <output>
            <type>Image</type>
            <port carrier="udp">/milClassifier/img:o</port>
            <description></description>
        </output>

        <output>
            <type>unk</type>
            <port carrier="tcp">/milClassifier/sifts:o</port>
            <description></description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/milClassifier/OPC:io</port>
            <description>Used to communicate with the objects properties collector.</description>
        </output>

    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
            <gpu></gpu><!--need to add requirements here! -->
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library>YARP</library>
        <library>OpenCV</library>
    </development>

</module>
