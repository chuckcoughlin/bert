<module>
    <!-- module's name should match its executable file's name. -->
    <name>iolStateMachineHandler</name>
    <description>This module is responsible for coordinating all the components that form the overall "icub_iolStateMachineHandler" application. To this end, it receives input from the human operator and then forwards proper requests to the classifier, the blob detector, the motion capture, the motor layer to let the robot achieve the goal. </description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="specify the period (given in [ms]) of the thread devoted to real-time objects localization." default="30 ms"> rt_localization_period </param>
        <param desc="specify the period (given in [ms]) of the thread devoted to updating the objects properties database." default="60 ms"> memory_update_period </param>
        <param desc="specify the camera used to localized object ( left \ right )" default="left"> camera </param>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
      <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
    </authors>

    <!-- <data> can have multiple <input> or <output> tags. -->
    <data>

        <input>
            <type>Image</type>
            <port carrier="udp">/iolStateMachineHandler/img:i</port>
            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>no</required>
            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>Receives the image acquired from the camera previously specified through the command-line parameters</description>
        </input>

    <input><!--ATTENTION! This is called blobs.rpc in main.cpp -->
        <type>unk</type>
            <port carrier="tcp">/iolStateMachineHandler/blobs:i</port>
            <required>no</required>
            <priority>no</priority>
            <description>Used to forward requests to the blob detector for image segmentation.</description>
    </input>
        <input>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/human:rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>Receives requests for actions execution.</description>
        </input>

    <input>
            <type>unk</type>
            <port carrier="tcp">/iolStateMachineHandler/motor_stop:i</port>
            <required>no</required>
            <priority>no</priority>
            <description>Receives the [icub-stop] trigger from the verbal commands interpreter.</description>
        </input>

    <input>
            <type>Bottle</type>
            <port carrier="tcp">/iolStateMachineHandler/point:i</port>
            <required>no</required>
            <priority>no</priority>
            <description>Receives the latest pointed location within the image from the motion capture module.</description>
        </input>

        <!-- output datas if available -->
        <output>
            <type>Image</type>
            <port carrier="udp">/iolStateMachineHandler/img:o</port>
            <description>Streams out the image containing recognized object. The image is updated whenever an action is required to be executed.</description>
        </output>

        <output>
            <type>Image</type>
            <port carrier="udp">/iolStateMachineHandler/imgLoc:o</port>
            <description>Streams out the images for real-time objects localization.</description>
        </output>

        <output>
            <type>Image</type>
            <port carrier="udp">/iolStateMachineHandler/imgClassifier:o</port>
            <description>Used to pass images to the classifier.</description>
        </output>

        <!-- output>
            <type>Rpc</type>
            <port carrier="tcp">/blobs:rpc</port>
            <description>Used to forward requests to the blob detector for image segmentation.</description>
        </output -->

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/classify:rpc</port>
            <description>Sends out requests for object classification.Used to forward requests to the blob detector for image segmentation.</description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/get3d:rpc</port>
            <description></description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/wbd:rpc</port>
            <description></description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/motor:rpc</port>
            <description>Sends out motor commands.</description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/motor_stop:rpc</port>
            <description>Used to interrupt/restore motor capabilities.</description>
        </output>

        <output>
            <type>Bottle</type>
            <port carrier="tcp">/iolStateMachineHandler/speak:o</port>
            <description>Streams out the robot's sentences that need to be spoken.</description>
        </output>

        <output>
            <type>Rpc</type>
            <port carrier="tcp">/iolStateMachineHandler/memory:rpc</port>
            <description>Used to communicate with the objects properties collector.</description>
        </output>

    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library>YARP</library>
    </development>

</module>
